
CartelFarmacia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ce  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac7  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9c  00000000  00000000  00002c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c0  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000954  00000000  00000000  0000410c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_4>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_16>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 30       	cpi	r26, 0x0A	; 10
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 c2 01 	call	0x384	; 0x384 <main>
  e2:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <__vector_4>:
const int D3 = 17;	//DataIn3	(A3)



ISR (PCINT1_vect) // Interrupciones por cambio en las entradas del control remoto
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	delay(500);		//Antirrebote
 10c:	64 ef       	ldi	r22, 0xF4	; 244
 10e:	71 e0       	ldi	r23, 0x01	; 1
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 40 02 	call	0x480	; 0x480 <delay>
	if(digitalRead(D0)==1){	//D0 cambia el modo al siguiente
 118:	8e e0       	ldi	r24, 0x0E	; 14
 11a:	0e 94 4b 03 	call	0x696	; 0x696 <digitalRead>
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	81 f4       	brne	.+32     	; 0x142 <__vector_4+0x58>
		modo++;
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	8f 5f       	subi	r24, 0xFF	; 255
		if(modo>3){modo=0;}
 128:	84 30       	cpi	r24, 0x04	; 4
 12a:	18 f4       	brcc	.+6      	; 0x132 <__vector_4+0x48>

ISR (PCINT1_vect) // Interrupciones por cambio en las entradas del control remoto
{
	delay(500);		//Antirrebote
	if(digitalRead(D0)==1){	//D0 cambia el modo al siguiente
		modo++;
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 130:	02 c0       	rjmp	.+4      	; 0x136 <__vector_4+0x4c>
		if(modo>3){modo=0;}
 132:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		while(digitalRead(D0));	//Espera a que se suelte el boton
 136:	8e e0       	ldi	r24, 0x0E	; 14
 138:	0e 94 4b 03 	call	0x696	; 0x696 <digitalRead>
 13c:	89 2b       	or	r24, r25
 13e:	d9 f7       	brne	.-10     	; 0x136 <__vector_4+0x4c>
 140:	2f c0       	rjmp	.+94     	; 0x1a0 <__vector_4+0xb6>
		PCIFR=0;				//Limpia la bandera para no volver a entrar en la interrupcion
	}
	else if(digitalRead(D2)==1){	//D2 cambia el modo hacia atras
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	0e 94 4b 03 	call	0x696	; 0x696 <digitalRead>
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	69 f4       	brne	.+26     	; 0x166 <__vector_4+0x7c>
		modo--;
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 150:	81 50       	subi	r24, 0x01	; 1
 152:	08 f4       	brcc	.+2      	; 0x156 <__vector_4+0x6c>
		if (modo==255){modo=3;}
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		while(digitalRead(D2));	//Espera a que se suelte el boton
 15a:	80 e1       	ldi	r24, 0x10	; 16
 15c:	0e 94 4b 03 	call	0x696	; 0x696 <digitalRead>
 160:	89 2b       	or	r24, r25
 162:	d9 f7       	brne	.-10     	; 0x15a <__vector_4+0x70>
 164:	1d c0       	rjmp	.+58     	; 0x1a0 <__vector_4+0xb6>
		PCIFR=0;				//Limpia la bandera para no volver a entrar en la interrupcion
	}
	else if(digitalRead(D1)==1){	//D1 enciende el mensaje "En turno"
 166:	8f e0       	ldi	r24, 0x0F	; 15
 168:	0e 94 4b 03 	call	0x696	; 0x696 <digitalRead>
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	51 f4       	brne	.+20     	; 0x184 <__vector_4+0x9a>
		digitalWrite(turno,HIGH);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	8b e0       	ldi	r24, 0x0B	; 11
 174:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
		while(digitalRead(D1));	//Espera a que se suelte el boton
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	0e 94 4b 03 	call	0x696	; 0x696 <digitalRead>
 17e:	89 2b       	or	r24, r25
 180:	d9 f7       	brne	.-10     	; 0x178 <__vector_4+0x8e>
 182:	0e c0       	rjmp	.+28     	; 0x1a0 <__vector_4+0xb6>
		PCIFR=0;				//Limpia la bandera para no volver a entrar en la interrupcion
	}
	else if(digitalRead(D3)==1){	//D3 apaga el mensaje "En turno"
 184:	81 e1       	ldi	r24, 0x11	; 17
 186:	0e 94 4b 03 	call	0x696	; 0x696 <digitalRead>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	51 f4       	brne	.+20     	; 0x1a2 <__vector_4+0xb8>
		digitalWrite(turno,LOW);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	8b e0       	ldi	r24, 0x0B	; 11
 192:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
		while(digitalRead(D3));	//Espera a que se suelte el boton
 196:	81 e1       	ldi	r24, 0x11	; 17
 198:	0e 94 4b 03 	call	0x696	; 0x696 <digitalRead>
 19c:	89 2b       	or	r24, r25
 19e:	d9 f7       	brne	.-10     	; 0x196 <__vector_4+0xac>
		PCIFR=0;				//Limpia la bandera para no volver a entrar en la interrupcion
 1a0:	1b ba       	out	0x1b, r1	; 27
	}
	
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <setup>:


void setup() {
	//GPIO
	pinMode(cruz1,OUTPUT);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
	pinMode(cruz2,OUTPUT);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
	pinMode(circ,OUTPUT);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
	pinMode(turno,OUTPUT);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
	
	pinMode(D0,INPUT);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	8e e0       	ldi	r24, 0x0E	; 14
 1e8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
	pinMode(D1,INPUT);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	8f e0       	ldi	r24, 0x0F	; 15
 1f0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
	pinMode(D2,INPUT);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
	pinMode(D3,INPUT);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	81 e1       	ldi	r24, 0x11	; 17
 200:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
	
	//Interrupciones
	PCIFR = 0;	//Baja todas las banderas de interrupcion
 204:	1b ba       	out	0x1b, r1	; 27
	PCICR = 0x02;	//Habilita las interrupciones por cambio desde A0 a A5
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = 0x0F;	//Habilita las interrupciones de A0:A4
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	
	
	
	digitalWrite(cruz1,LOW);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
	digitalWrite(cruz2,LOW);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
	digitalWrite(circ,LOW);
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
	digitalWrite(turno,LOW);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	8b e0       	ldi	r24, 0x0B	; 11
 22e:	0c 94 1c 03 	jmp	0x638	; 0x638 <digitalWrite>

00000232 <loop>:
}

void loop() {
	switch(modo){
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	a1 f0       	breq	.+40     	; 0x262 <loop+0x30>
 23a:	38 f0       	brcs	.+14     	; 0x24a <loop+0x18>
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	09 f4       	brne	.+2      	; 0x242 <loop+0x10>
 240:	45 c0       	rjmp	.+138    	; 0x2cc <loop+0x9a>
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	09 f4       	brne	.+2      	; 0x248 <loop+0x16>
 246:	7d c0       	rjmp	.+250    	; 0x342 <loop+0x110>
 248:	08 95       	ret
		case 0:
			digitalWrite(circ,HIGH);
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			digitalWrite(cruz1,HIGH);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	85 e0       	ldi	r24, 0x05	; 5
 256:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			digitalWrite(cruz2,HIGH);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	0c 94 1c 03 	jmp	0x638	; 0x638 <digitalWrite>
		break;
		
		case 1:
			digitalWrite(cruz1,HIGH);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(500);
 26a:	64 ef       	ldi	r22, 0xF4	; 244
 26c:	71 e0       	ldi	r23, 0x01	; 1
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 40 02 	call	0x480	; 0x480 <delay>
			digitalWrite(cruz2,HIGH);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(500);
 27e:	64 ef       	ldi	r22, 0xF4	; 244
 280:	71 e0       	ldi	r23, 0x01	; 1
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 40 02 	call	0x480	; 0x480 <delay>
			digitalWrite(circ,HIGH);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(500);
 292:	64 ef       	ldi	r22, 0xF4	; 244
 294:	71 e0       	ldi	r23, 0x01	; 1
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 40 02 	call	0x480	; 0x480 <delay>
		
			digitalWrite(cruz1,LOW);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(500);
 2a6:	64 ef       	ldi	r22, 0xF4	; 244
 2a8:	71 e0       	ldi	r23, 0x01	; 1
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 40 02 	call	0x480	; 0x480 <delay>
			digitalWrite(cruz2,LOW);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(500);
 2ba:	64 ef       	ldi	r22, 0xF4	; 244
 2bc:	71 e0       	ldi	r23, 0x01	; 1
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 40 02 	call	0x480	; 0x480 <delay>
			digitalWrite(circ,LOW);
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	53 c0       	rjmp	.+166    	; 0x372 <loop+0x140>
			delay(500);
			break;
		
		case 2:
			digitalWrite(cruz1,HIGH);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(200);
 2d4:	68 ec       	ldi	r22, 0xC8	; 200
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 40 02 	call	0x480	; 0x480 <delay>
			digitalWrite(cruz2,HIGH);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(200);
 2e8:	68 ec       	ldi	r22, 0xC8	; 200
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 40 02 	call	0x480	; 0x480 <delay>
			digitalWrite(circ,HIGH);
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(200);
 2fc:	68 ec       	ldi	r22, 0xC8	; 200
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 40 02 	call	0x480	; 0x480 <delay>
		
			digitalWrite(cruz1,LOW);
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(200);
 310:	68 ec       	ldi	r22, 0xC8	; 200
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 40 02 	call	0x480	; 0x480 <delay>
			digitalWrite(cruz2,LOW);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(200);
 324:	68 ec       	ldi	r22, 0xC8	; 200
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 40 02 	call	0x480	; 0x480 <delay>
			digitalWrite(circ,LOW);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(200);
 338:	68 ec       	ldi	r22, 0xC8	; 200
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	1e c0       	rjmp	.+60     	; 0x37e <loop+0x14c>
			break;
		
		case 3:
			digitalWrite(circ,HIGH);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			digitalWrite(cruz1,HIGH);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	85 e0       	ldi	r24, 0x05	; 5
 34e:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			digitalWrite(cruz2,HIGH);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	86 e0       	ldi	r24, 0x06	; 6
 356:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(500);
 35a:	64 ef       	ldi	r22, 0xF4	; 244
 35c:	71 e0       	ldi	r23, 0x01	; 1
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 40 02 	call	0x480	; 0x480 <delay>
			
			digitalWrite(cruz1,LOW);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	85 e0       	ldi	r24, 0x05	; 5
 36a:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			digitalWrite(cruz2,LOW);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			delay(500);
 376:	64 ef       	ldi	r22, 0xF4	; 244
 378:	71 e0       	ldi	r23, 0x01	; 1
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0c 94 40 02 	jmp	0x480	; 0x480 <delay>

00000382 <initVariant>:
 382:	08 95       	ret

00000384 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 384:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <init>

	initVariant();
 388:	0e 94 c1 01 	call	0x382	; 0x382 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 38c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 390:	c0 e0       	ldi	r28, 0x00	; 0
 392:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 394:	0e 94 19 01 	call	0x232	; 0x232 <loop>
		if (serialEventRun) serialEventRun();
 398:	20 97       	sbiw	r28, 0x00	; 0
 39a:	e1 f3       	breq	.-8      	; 0x394 <main+0x10>
 39c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3a0:	f9 cf       	rjmp	.-14     	; 0x394 <main+0x10>

000003a2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer0_millis>
 3bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer0_millis+0x1>
 3c0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <timer0_millis+0x2>
 3c4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <timer0_millis+0x3>
 3c8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <timer0_fract>
 3cc:	23 e0       	ldi	r18, 0x03	; 3
 3ce:	23 0f       	add	r18, r19
 3d0:	2d 37       	cpi	r18, 0x7D	; 125
 3d2:	20 f4       	brcc	.+8      	; 0x3dc <__vector_16+0x3a>
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	a1 1d       	adc	r26, r1
 3d8:	b1 1d       	adc	r27, r1
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <__vector_16+0x44>
 3dc:	26 e8       	ldi	r18, 0x86	; 134
 3de:	23 0f       	add	r18, r19
 3e0:	02 96       	adiw	r24, 0x02	; 2
 3e2:	a1 1d       	adc	r26, r1
 3e4:	b1 1d       	adc	r27, r1
 3e6:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <timer0_fract>
 3ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer0_millis>
 3ee:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer0_millis+0x1>
 3f2:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <timer0_millis+0x2>
 3f6:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <timer0_millis+0x3>
 3fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer0_overflow_count>
 3fe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timer0_overflow_count+0x1>
 402:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <timer0_overflow_count+0x2>
 406:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <timer0_overflow_count+0x3>
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	a1 1d       	adc	r26, r1
 40e:	b1 1d       	adc	r27, r1
 410:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timer0_overflow_count>
 414:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timer0_overflow_count+0x1>
 418:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <timer0_overflow_count+0x2>
 41c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <timer0_overflow_count+0x3>
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <micros>:
 436:	3f b7       	in	r19, 0x3f	; 63
 438:	f8 94       	cli
 43a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer0_overflow_count>
 43e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timer0_overflow_count+0x1>
 442:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <timer0_overflow_count+0x2>
 446:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <timer0_overflow_count+0x3>
 44a:	26 b5       	in	r18, 0x26	; 38
 44c:	a8 9b       	sbis	0x15, 0	; 21
 44e:	05 c0       	rjmp	.+10     	; 0x45a <micros+0x24>
 450:	2f 3f       	cpi	r18, 0xFF	; 255
 452:	19 f0       	breq	.+6      	; 0x45a <micros+0x24>
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	a1 1d       	adc	r26, r1
 458:	b1 1d       	adc	r27, r1
 45a:	3f bf       	out	0x3f, r19	; 63
 45c:	ba 2f       	mov	r27, r26
 45e:	a9 2f       	mov	r26, r25
 460:	98 2f       	mov	r25, r24
 462:	88 27       	eor	r24, r24
 464:	82 0f       	add	r24, r18
 466:	91 1d       	adc	r25, r1
 468:	a1 1d       	adc	r26, r1
 46a:	b1 1d       	adc	r27, r1
 46c:	bc 01       	movw	r22, r24
 46e:	cd 01       	movw	r24, r26
 470:	42 e0       	ldi	r20, 0x02	; 2
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	4a 95       	dec	r20
 47c:	d1 f7       	brne	.-12     	; 0x472 <micros+0x3c>
 47e:	08 95       	ret

00000480 <delay>:
 480:	8f 92       	push	r8
 482:	9f 92       	push	r9
 484:	af 92       	push	r10
 486:	bf 92       	push	r11
 488:	cf 92       	push	r12
 48a:	df 92       	push	r13
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	6b 01       	movw	r12, r22
 492:	7c 01       	movw	r14, r24
 494:	0e 94 1b 02 	call	0x436	; 0x436 <micros>
 498:	4b 01       	movw	r8, r22
 49a:	5c 01       	movw	r10, r24
 49c:	c1 14       	cp	r12, r1
 49e:	d1 04       	cpc	r13, r1
 4a0:	e1 04       	cpc	r14, r1
 4a2:	f1 04       	cpc	r15, r1
 4a4:	01 f1       	breq	.+64     	; 0x4e6 <delay+0x66>
 4a6:	0e 94 74 03 	call	0x6e8	; 0x6e8 <yield>
 4aa:	0e 94 1b 02 	call	0x436	; 0x436 <micros>
 4ae:	dc 01       	movw	r26, r24
 4b0:	cb 01       	movw	r24, r22
 4b2:	88 19       	sub	r24, r8
 4b4:	99 09       	sbc	r25, r9
 4b6:	aa 09       	sbc	r26, r10
 4b8:	bb 09       	sbc	r27, r11
 4ba:	88 3e       	cpi	r24, 0xE8	; 232
 4bc:	93 40       	sbci	r25, 0x03	; 3
 4be:	a1 05       	cpc	r26, r1
 4c0:	b1 05       	cpc	r27, r1
 4c2:	60 f3       	brcs	.-40     	; 0x49c <delay+0x1c>
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	c2 1a       	sub	r12, r18
 4c8:	d1 08       	sbc	r13, r1
 4ca:	e1 08       	sbc	r14, r1
 4cc:	f1 08       	sbc	r15, r1
 4ce:	88 ee       	ldi	r24, 0xE8	; 232
 4d0:	88 0e       	add	r8, r24
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	98 1e       	adc	r9, r24
 4d6:	a1 1c       	adc	r10, r1
 4d8:	b1 1c       	adc	r11, r1
 4da:	c1 14       	cp	r12, r1
 4dc:	d1 04       	cpc	r13, r1
 4de:	e1 04       	cpc	r14, r1
 4e0:	f1 04       	cpc	r15, r1
 4e2:	19 f7       	brne	.-58     	; 0x4aa <delay+0x2a>
 4e4:	db cf       	rjmp	.-74     	; 0x49c <delay+0x1c>
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	bf 90       	pop	r11
 4f0:	af 90       	pop	r10
 4f2:	9f 90       	pop	r9
 4f4:	8f 90       	pop	r8
 4f6:	08 95       	ret

000004f8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 4f8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 4fa:	84 b5       	in	r24, 0x24	; 36
 4fc:	82 60       	ori	r24, 0x02	; 2
 4fe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 500:	84 b5       	in	r24, 0x24	; 36
 502:	81 60       	ori	r24, 0x01	; 1
 504:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 506:	85 b5       	in	r24, 0x25	; 37
 508:	82 60       	ori	r24, 0x02	; 2
 50a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 50c:	85 b5       	in	r24, 0x25	; 37
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 512:	ee e6       	ldi	r30, 0x6E	; 110
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 51c:	e1 e8       	ldi	r30, 0x81	; 129
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 522:	80 81       	ld	r24, Z
 524:	82 60       	ori	r24, 0x02	; 2
 526:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 528:	80 81       	ld	r24, Z
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 52e:	e0 e8       	ldi	r30, 0x80	; 128
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	81 60       	ori	r24, 0x01	; 1
 536:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 538:	e1 eb       	ldi	r30, 0xB1	; 177
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	84 60       	ori	r24, 0x04	; 4
 540:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 542:	e0 eb       	ldi	r30, 0xB0	; 176
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	81 60       	ori	r24, 0x01	; 1
 54a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 54c:	ea e7       	ldi	r30, 0x7A	; 122
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	84 60       	ori	r24, 0x04	; 4
 554:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 556:	80 81       	ld	r24, Z
 558:	82 60       	ori	r24, 0x02	; 2
 55a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 55c:	80 81       	ld	r24, Z
 55e:	81 60       	ori	r24, 0x01	; 1
 560:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 562:	80 81       	ld	r24, Z
 564:	80 68       	ori	r24, 0x80	; 128
 566:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 568:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 56c:	08 95       	ret

0000056e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	81 f0       	breq	.+32     	; 0x592 <turnOffPWM+0x24>
 572:	28 f4       	brcc	.+10     	; 0x57e <turnOffPWM+0x10>
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	99 f0       	breq	.+38     	; 0x59e <turnOffPWM+0x30>
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	a1 f0       	breq	.+40     	; 0x5a4 <turnOffPWM+0x36>
 57c:	08 95       	ret
 57e:	87 30       	cpi	r24, 0x07	; 7
 580:	a9 f0       	breq	.+42     	; 0x5ac <turnOffPWM+0x3e>
 582:	88 30       	cpi	r24, 0x08	; 8
 584:	b9 f0       	breq	.+46     	; 0x5b4 <turnOffPWM+0x46>
 586:	84 30       	cpi	r24, 0x04	; 4
 588:	d1 f4       	brne	.+52     	; 0x5be <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 58a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 58e:	8f 7d       	andi	r24, 0xDF	; 223
 590:	03 c0       	rjmp	.+6      	; 0x598 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 592:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 596:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 598:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 59c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 59e:	84 b5       	in	r24, 0x24	; 36
 5a0:	8f 77       	andi	r24, 0x7F	; 127
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 5a4:	84 b5       	in	r24, 0x24	; 36
 5a6:	8f 7d       	andi	r24, 0xDF	; 223
 5a8:	84 bd       	out	0x24, r24	; 36
 5aa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 5ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5b0:	8f 77       	andi	r24, 0x7F	; 127
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 5b4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5b8:	8f 7d       	andi	r24, 0xDF	; 223
 5ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5be:	08 95       	ret

000005c0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	fc 01       	movw	r30, r24
 5c8:	e4 58       	subi	r30, 0x84	; 132
 5ca:	ff 4f       	sbci	r31, 0xFF	; 255
 5cc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 5ce:	fc 01       	movw	r30, r24
 5d0:	e0 57       	subi	r30, 0x70	; 112
 5d2:	ff 4f       	sbci	r31, 0xFF	; 255
 5d4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 5d6:	88 23       	and	r24, r24
 5d8:	61 f1       	breq	.+88     	; 0x632 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	fc 01       	movw	r30, r24
 5e2:	e8 54       	subi	r30, 0x48	; 72
 5e4:	ff 4f       	sbci	r31, 0xFF	; 255
 5e6:	c5 91       	lpm	r28, Z+
 5e8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 5ea:	fc 01       	movw	r30, r24
 5ec:	e2 55       	subi	r30, 0x52	; 82
 5ee:	ff 4f       	sbci	r31, 0xFF	; 255
 5f0:	a5 91       	lpm	r26, Z+
 5f2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 5f4:	61 11       	cpse	r22, r1
 5f6:	09 c0       	rjmp	.+18     	; 0x60a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 5f8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5fa:	f8 94       	cli
		*reg &= ~bit;
 5fc:	88 81       	ld	r24, Y
 5fe:	20 95       	com	r18
 600:	82 23       	and	r24, r18
 602:	88 83       	st	Y, r24
		*out &= ~bit;
 604:	ec 91       	ld	r30, X
 606:	2e 23       	and	r18, r30
 608:	0b c0       	rjmp	.+22     	; 0x620 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 60a:	62 30       	cpi	r22, 0x02	; 2
 60c:	61 f4       	brne	.+24     	; 0x626 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 60e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 610:	f8 94       	cli
		*reg &= ~bit;
 612:	88 81       	ld	r24, Y
 614:	32 2f       	mov	r19, r18
 616:	30 95       	com	r19
 618:	83 23       	and	r24, r19
 61a:	88 83       	st	Y, r24
		*out |= bit;
 61c:	ec 91       	ld	r30, X
 61e:	2e 2b       	or	r18, r30
 620:	2c 93       	st	X, r18
		SREG = oldSREG;
 622:	9f bf       	out	0x3f, r25	; 63
 624:	06 c0       	rjmp	.+12     	; 0x632 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 626:	8f b7       	in	r24, 0x3f	; 63
                cli();
 628:	f8 94       	cli
		*reg |= bit;
 62a:	e8 81       	ld	r30, Y
 62c:	2e 2b       	or	r18, r30
 62e:	28 83       	st	Y, r18
		SREG = oldSREG;
 630:	8f bf       	out	0x3f, r24	; 63
	}
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 63e:	28 2f       	mov	r18, r24
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	f9 01       	movw	r30, r18
 644:	e8 59       	subi	r30, 0x98	; 152
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 64a:	f9 01       	movw	r30, r18
 64c:	e4 58       	subi	r30, 0x84	; 132
 64e:	ff 4f       	sbci	r31, 0xFF	; 255
 650:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 652:	f9 01       	movw	r30, r18
 654:	e0 57       	subi	r30, 0x70	; 112
 656:	ff 4f       	sbci	r31, 0xFF	; 255
 658:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 65a:	cc 23       	and	r28, r28
 65c:	c1 f0       	breq	.+48     	; 0x68e <digitalWrite+0x56>
 65e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 660:	81 11       	cpse	r24, r1
 662:	0e 94 b7 02 	call	0x56e	; 0x56e <turnOffPWM>

	out = portOutputRegister(port);
 666:	ec 2f       	mov	r30, r28
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	e2 55       	subi	r30, 0x52	; 82
 670:	ff 4f       	sbci	r31, 0xFF	; 255
 672:	a5 91       	lpm	r26, Z+
 674:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 676:	9f b7       	in	r25, 0x3f	; 63
	cli();
 678:	f8 94       	cli

	if (val == LOW) {
 67a:	11 11       	cpse	r17, r1
 67c:	04 c0       	rjmp	.+8      	; 0x686 <digitalWrite+0x4e>
		*out &= ~bit;
 67e:	8c 91       	ld	r24, X
 680:	d0 95       	com	r29
 682:	d8 23       	and	r29, r24
 684:	02 c0       	rjmp	.+4      	; 0x68a <digitalWrite+0x52>
	} else {
		*out |= bit;
 686:	ec 91       	ld	r30, X
 688:	de 2b       	or	r29, r30
 68a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 68c:	9f bf       	out	0x3f, r25	; 63
}
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	1f 91       	pop	r17
 694:	08 95       	ret

00000696 <digitalRead>:

int digitalRead(uint8_t pin)
{
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 69a:	28 2f       	mov	r18, r24
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	f9 01       	movw	r30, r18
 6a0:	e8 59       	subi	r30, 0x98	; 152
 6a2:	ff 4f       	sbci	r31, 0xFF	; 255
 6a4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 6a6:	f9 01       	movw	r30, r18
 6a8:	e4 58       	subi	r30, 0x84	; 132
 6aa:	ff 4f       	sbci	r31, 0xFF	; 255
 6ac:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 6ae:	f9 01       	movw	r30, r18
 6b0:	e0 57       	subi	r30, 0x70	; 112
 6b2:	ff 4f       	sbci	r31, 0xFF	; 255
 6b4:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 6b6:	cc 23       	and	r28, r28
 6b8:	91 f0       	breq	.+36     	; 0x6de <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 6ba:	81 11       	cpse	r24, r1
 6bc:	0e 94 b7 02 	call	0x56e	; 0x56e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 6c0:	ec 2f       	mov	r30, r28
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	ee 0f       	add	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	ec 55       	subi	r30, 0x5C	; 92
 6ca:	ff 4f       	sbci	r31, 0xFF	; 255
 6cc:	a5 91       	lpm	r26, Z+
 6ce:	b4 91       	lpm	r27, Z
 6d0:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 6d2:	ed 23       	and	r30, r29
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	21 f4       	brne	.+8      	; 0x6e2 <digitalRead+0x4c>
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <digitalRead+0x4c>
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	08 95       	ret

000006e8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 6e8:	08 95       	ret

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
