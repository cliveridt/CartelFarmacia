
CartelFarmacia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000126c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e6  00800100  00800100  0000126c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000285b  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da4  00000000  00000000  00003c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d5  00000000  00000000  00004a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00005c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ac  00000000  00000000  00005fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013aa  00000000  00000000  00006970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00007d1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_4>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_13>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	76 03       	mulsu	r23, r22

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e8 ef       	ldi	r30, 0xF8	; 248
      d8:	f1 e1       	ldi	r31, 0x11	; 17
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a0 30       	cpi	r26, 0x00	; 0
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	21 e0       	ldi	r18, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a6 3e       	cpi	r26, 0xE6	; 230
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c2 e6       	ldi	r28, 0x62	; 98
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__tablejump2__>
     106:	c1 36       	cpi	r28, 0x61	; 97
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 ba 06 	call	0xd74	; 0xd74 <main>
     110:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_ZN7corazon5latirEv>:
		t4=t3+e;
		t5=t4+f;	//t5=periodo
		t=0;
	}
	
	void latir(){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	ec 01       	movw	r28, r24
		t++;
     11e:	2c 85       	ldd	r18, Y+12	; 0x0c
     120:	3d 85       	ldd	r19, Y+13	; 0x0d
     122:	2f 5f       	subi	r18, 0xFF	; 255
     124:	3f 4f       	sbci	r19, 0xFF	; 255
     126:	3d 87       	std	Y+13, r19	; 0x0d
     128:	2c 87       	std	Y+12, r18	; 0x0c
			t=0;
		}
	}
	
	unsigned char funcion(){
		if (t<=t0){
     12a:	e8 81       	ld	r30, Y
     12c:	f9 81       	ldd	r31, Y+1	; 0x01
     12e:	e2 17       	cp	r30, r18
     130:	f3 07       	cpc	r31, r19
     132:	04 f5       	brge	.+64     	; 0x174 <_ZN7corazon5latirEv+0x5c>
			return 0;
		}
		if(t>t0 && t<=t1){
     134:	6a 81       	ldd	r22, Y+2	; 0x02
     136:	7b 81       	ldd	r23, Y+3	; 0x03
     138:	62 17       	cp	r22, r18
     13a:	73 07       	cpc	r23, r19
     13c:	7c f4       	brge	.+30     	; 0x15c <_ZN7corazon5latirEv+0x44>
			int aux = (255 / (t1-t0));
			return aux*(t-t0);
		}
		if(t>t1 && t<=t2){
     13e:	ec 81       	ldd	r30, Y+4	; 0x04
     140:	fd 81       	ldd	r31, Y+5	; 0x05
     142:	e2 17       	cp	r30, r18
     144:	f3 07       	cpc	r31, r19
     146:	54 f4       	brge	.+20     	; 0x15c <_ZN7corazon5latirEv+0x44>
			int aux = (255 / (t1-t2));
			return aux*(t-t2);
		}
		if(t>t2 && t<=t3){
     148:	6e 81       	ldd	r22, Y+6	; 0x06
     14a:	7f 81       	ldd	r23, Y+7	; 0x07
     14c:	62 17       	cp	r22, r18
     14e:	73 07       	cpc	r23, r19
     150:	2c f4       	brge	.+10     	; 0x15c <_ZN7corazon5latirEv+0x44>
			int aux = (255 / (t3-t2));
			return aux*(t-t2);
		}
		if(t>t3 && t<=t4){
     152:	e8 85       	ldd	r30, Y+8	; 0x08
     154:	f9 85       	ldd	r31, Y+9	; 0x09
     156:	e2 17       	cp	r30, r18
     158:	f3 07       	cpc	r31, r19
     15a:	64 f0       	brlt	.+24     	; 0x174 <_ZN7corazon5latirEv+0x5c>
			int aux = (255 / (t3-t4));
			return aux*(t-t4);
     15c:	6e 1b       	sub	r22, r30
     15e:	7f 0b       	sbc	r23, r31
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 cc 08 	call	0x1198	; 0x1198 <__divmodhi4>
     168:	2e 1b       	sub	r18, r30
     16a:	3f 0b       	sbc	r19, r31
     16c:	62 9f       	mul	r22, r18
     16e:	60 2d       	mov	r22, r0
     170:	11 24       	eor	r1, r1
     172:	01 c0       	rjmp	.+2      	; 0x176 <_ZN7corazon5latirEv+0x5e>
		}
		if(t>t4){
			return 0;
     174:	60 e0       	ldi	r22, 0x00	; 0
		t=0;
	}
	
	void latir(){
		t++;
		analogWrite(pin,funcion());
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	8e 85       	ldd	r24, Y+14	; 0x0e
     17a:	0e 94 af 07 	call	0xf5e	; 0xf5e <analogWrite>
		if (t>t5){
     17e:	2c 85       	ldd	r18, Y+12	; 0x0c
     180:	3d 85       	ldd	r19, Y+13	; 0x0d
     182:	8a 85       	ldd	r24, Y+10	; 0x0a
     184:	9b 85       	ldd	r25, Y+11	; 0x0b
     186:	82 17       	cp	r24, r18
     188:	93 07       	cpc	r25, r19
     18a:	14 f4       	brge	.+4      	; 0x190 <_ZN7corazon5latirEv+0x78>
			t=0;
     18c:	1d 86       	std	Y+13, r1	; 0x0d
     18e:	1c 86       	std	Y+12, r1	; 0x0c
		}
	}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN12osciladorPWM7oscilarEv>:
		
		
		
	}
	
	void oscilar(){
     196:	8f 92       	push	r8
     198:	9f 92       	push	r9
     19a:	af 92       	push	r10
     19c:	bf 92       	push	r11
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	ec 01       	movw	r28, r24
		t++;
     1b0:	ca 84       	ldd	r12, Y+10	; 0x0a
     1b2:	db 84       	ldd	r13, Y+11	; 0x0b
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	c8 1a       	sub	r12, r24
     1b8:	d8 0a       	sbc	r13, r24
     1ba:	db 86       	std	Y+11, r13	; 0x0b
     1bc:	ca 86       	std	Y+10, r12	; 0x0a
			t=0;
		}
	}
	
	unsigned char funcion(){
		if (t<=t0){
     1be:	08 81       	ld	r16, Y
     1c0:	19 81       	ldd	r17, Y+1	; 0x01
     1c2:	0c 15       	cp	r16, r12
     1c4:	1d 05       	cpc	r17, r13
     1c6:	0c f0       	brlt	.+2      	; 0x1ca <_ZN12osciladorPWM7oscilarEv+0x34>
     1c8:	59 c0       	rjmp	.+178    	; 0x27c <_ZN12osciladorPWM7oscilarEv+0xe6>
			return 0;
		}
		else if(t>t0 && t<=t1){
     1ca:	6a 81       	ldd	r22, Y+2	; 0x02
     1cc:	7b 81       	ldd	r23, Y+3	; 0x03
     1ce:	6c 15       	cp	r22, r12
     1d0:	7d 05       	cpc	r23, r13
     1d2:	14 f1       	brlt	.+68     	; 0x218 <_ZN12osciladorPWM7oscilarEv+0x82>
			float aux = (PWM_MAX / (t1-t0)) * (t-t0);
			return (unsigned char)aux;
     1d4:	60 1b       	sub	r22, r16
     1d6:	71 0b       	sbc	r23, r17
     1d8:	07 2e       	mov	r0, r23
     1da:	00 0c       	add	r0, r0
     1dc:	88 0b       	sbc	r24, r24
     1de:	99 0b       	sbc	r25, r25
     1e0:	0e 94 c0 05 	call	0xb80	; 0xb80 <__floatsisf>
     1e4:	9b 01       	movw	r18, r22
     1e6:	ac 01       	movw	r20, r24
     1e8:	6c 85       	ldd	r22, Y+12	; 0x0c
     1ea:	7d 85       	ldd	r23, Y+13	; 0x0d
     1ec:	8e 85       	ldd	r24, Y+14	; 0x0e
     1ee:	9f 85       	ldd	r25, Y+15	; 0x0f
     1f0:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__divsf3>
     1f4:	4b 01       	movw	r8, r22
     1f6:	5c 01       	movw	r10, r24
     1f8:	b6 01       	movw	r22, r12
     1fa:	60 1b       	sub	r22, r16
     1fc:	71 0b       	sbc	r23, r17
     1fe:	07 2e       	mov	r0, r23
     200:	00 0c       	add	r0, r0
     202:	88 0b       	sbc	r24, r24
     204:	99 0b       	sbc	r25, r25
     206:	0e 94 c0 05 	call	0xb80	; 0xb80 <__floatsisf>
     20a:	9b 01       	movw	r18, r22
     20c:	ac 01       	movw	r20, r24
     20e:	c5 01       	movw	r24, r10
     210:	b4 01       	movw	r22, r8
     212:	0e 94 4c 06 	call	0xc98	; 0xc98 <__mulsf3>
     216:	2f c0       	rjmp	.+94     	; 0x276 <_ZN12osciladorPWM7oscilarEv+0xe0>
		}
		else if(t>t1 && t<=t2){
     218:	0c 81       	ldd	r16, Y+4	; 0x04
     21a:	1d 81       	ldd	r17, Y+5	; 0x05
     21c:	0c 15       	cp	r16, r12
     21e:	1d 05       	cpc	r17, r13
     220:	2c f0       	brlt	.+10     	; 0x22c <_ZN12osciladorPWM7oscilarEv+0x96>
			return PWM_MAX;
     222:	6c 85       	ldd	r22, Y+12	; 0x0c
     224:	7d 85       	ldd	r23, Y+13	; 0x0d
     226:	8e 85       	ldd	r24, Y+14	; 0x0e
     228:	9f 85       	ldd	r25, Y+15	; 0x0f
     22a:	25 c0       	rjmp	.+74     	; 0x276 <_ZN12osciladorPWM7oscilarEv+0xe0>
		}
		else if(t>t2 && t<=t3){
     22c:	ee 80       	ldd	r14, Y+6	; 0x06
     22e:	ff 80       	ldd	r15, Y+7	; 0x07
     230:	ec 14       	cp	r14, r12
     232:	fd 04       	cpc	r15, r13
     234:	1c f1       	brlt	.+70     	; 0x27c <_ZN12osciladorPWM7oscilarEv+0xe6>
			float aux = (PWM_MAX * (t-t3)) / (t2-t3);
			return (unsigned char)aux;
     236:	b6 01       	movw	r22, r12
     238:	6e 19       	sub	r22, r14
     23a:	7f 09       	sbc	r23, r15
     23c:	07 2e       	mov	r0, r23
     23e:	00 0c       	add	r0, r0
     240:	88 0b       	sbc	r24, r24
     242:	99 0b       	sbc	r25, r25
     244:	0e 94 c0 05 	call	0xb80	; 0xb80 <__floatsisf>
     248:	2c 85       	ldd	r18, Y+12	; 0x0c
     24a:	3d 85       	ldd	r19, Y+13	; 0x0d
     24c:	4e 85       	ldd	r20, Y+14	; 0x0e
     24e:	5f 85       	ldd	r21, Y+15	; 0x0f
     250:	0e 94 4c 06 	call	0xc98	; 0xc98 <__mulsf3>
     254:	4b 01       	movw	r8, r22
     256:	5c 01       	movw	r10, r24
     258:	b8 01       	movw	r22, r16
     25a:	6e 19       	sub	r22, r14
     25c:	7f 09       	sbc	r23, r15
     25e:	07 2e       	mov	r0, r23
     260:	00 0c       	add	r0, r0
     262:	88 0b       	sbc	r24, r24
     264:	99 0b       	sbc	r25, r25
     266:	0e 94 c0 05 	call	0xb80	; 0xb80 <__floatsisf>
     26a:	9b 01       	movw	r18, r22
     26c:	ac 01       	movw	r20, r24
     26e:	c5 01       	movw	r24, r10
     270:	b4 01       	movw	r22, r8
     272:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__divsf3>
     276:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixunssfsi>
     27a:	01 c0       	rjmp	.+2      	; 0x27e <_ZN12osciladorPWM7oscilarEv+0xe8>
		}
		else if(t>t3){
			return 0;
     27c:	60 e0       	ldi	r22, 0x00	; 0
		
	}
	
	void oscilar(){
		t++;
		analogWrite(pin,funcion());
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	88 89       	ldd	r24, Y+16	; 0x10
     282:	0e 94 af 07 	call	0xf5e	; 0xf5e <analogWrite>
		if (t>t4){
     286:	2a 85       	ldd	r18, Y+10	; 0x0a
     288:	3b 85       	ldd	r19, Y+11	; 0x0b
     28a:	88 85       	ldd	r24, Y+8	; 0x08
     28c:	99 85       	ldd	r25, Y+9	; 0x09
     28e:	82 17       	cp	r24, r18
     290:	93 07       	cpc	r25, r19
     292:	14 f4       	brge	.+4      	; 0x298 <_ZN12osciladorPWM7oscilarEv+0x102>
			t=0;
     294:	1b 86       	std	Y+11, r1	; 0x0b
     296:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <__vector_4>:
//En turno
osciladorPWM TURNO = osciladorPWM(turno,255,0,100,100,100,100);


ISR (PCINT1_vect) // Interrupciones por cambio en las entradas del control remoto
{
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	2f 93       	push	r18
     2be:	3f 93       	push	r19
     2c0:	4f 93       	push	r20
     2c2:	5f 93       	push	r21
     2c4:	6f 93       	push	r22
     2c6:	7f 93       	push	r23
     2c8:	8f 93       	push	r24
     2ca:	9f 93       	push	r25
     2cc:	af 93       	push	r26
     2ce:	bf 93       	push	r27
     2d0:	ef 93       	push	r30
     2d2:	ff 93       	push	r31
	delay(500);		//Antirrebote
     2d4:	64 ef       	ldi	r22, 0xF4	; 244
     2d6:	71 e0       	ldi	r23, 0x01	; 1
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
	if(digitalRead(D0)==1){	//D0 cambia el modo al siguiente
     2e0:	8e e0       	ldi	r24, 0x0E	; 14
     2e2:	0e 94 a2 08 	call	0x1144	; 0x1144 <digitalRead>
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	a1 f4       	brne	.+40     	; 0x312 <__vector_4+0x60>
		automatico=0;
     2ea:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <automatico+0x1>
     2ee:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <automatico>
		modo++;
     2f2:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <modo>
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
		if(modo>CANT_MODOS){modo=0;}
     2f8:	8a 30       	cpi	r24, 0x0A	; 10
     2fa:	18 f4       	brcc	.+6      	; 0x302 <__vector_4+0x50>
ISR (PCINT1_vect) // Interrupciones por cambio en las entradas del control remoto
{
	delay(500);		//Antirrebote
	if(digitalRead(D0)==1){	//D0 cambia el modo al siguiente
		automatico=0;
		modo++;
     2fc:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <modo>
     300:	02 c0       	rjmp	.+4      	; 0x306 <__vector_4+0x54>
		if(modo>CANT_MODOS){modo=0;}
     302:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <modo>
		while(digitalRead(D0));	//Espera a que se suelte el boton
     306:	8e e0       	ldi	r24, 0x0E	; 14
     308:	0e 94 a2 08 	call	0x1144	; 0x1144 <digitalRead>
     30c:	89 2b       	or	r24, r25
     30e:	d9 f7       	brne	.-10     	; 0x306 <__vector_4+0x54>
     310:	34 c0       	rjmp	.+104    	; 0x37a <__vector_4+0xc8>
		//PCIFR=0;				//Limpia la bandera para no volver a entrar en la interrupcion
	}
	else if(digitalRead(D2)==1){	//D2 cambia el modo hacia atras
     312:	80 e1       	ldi	r24, 0x10	; 16
     314:	0e 94 a2 08 	call	0x1144	; 0x1144 <digitalRead>
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	89 f4       	brne	.+34     	; 0x33e <__vector_4+0x8c>
		automatico=0;		
     31c:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <automatico+0x1>
     320:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <automatico>
		modo--;
     324:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <modo>
     328:	81 50       	subi	r24, 0x01	; 1
     32a:	08 f4       	brcc	.+2      	; 0x32e <__vector_4+0x7c>
		if (modo==255){modo=CANT_MODOS;}
     32c:	89 e0       	ldi	r24, 0x09	; 9
     32e:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <modo>
		while(digitalRead(D2));	//Espera a que se suelte el boton
     332:	80 e1       	ldi	r24, 0x10	; 16
     334:	0e 94 a2 08 	call	0x1144	; 0x1144 <digitalRead>
     338:	89 2b       	or	r24, r25
     33a:	d9 f7       	brne	.-10     	; 0x332 <__vector_4+0x80>
     33c:	1e c0       	rjmp	.+60     	; 0x37a <__vector_4+0xc8>
		//PCIFR=0;				//Limpia la bandera para no volver a entrar en la interrupcion
	}
	else if(digitalRead(D1)==1){	//D1 enciende el mensaje "En turno"
     33e:	8f e0       	ldi	r24, 0x0F	; 15
     340:	0e 94 a2 08 	call	0x1144	; 0x1144 <digitalRead>
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	49 f4       	brne	.+18     	; 0x35a <__vector_4+0xa8>
		enturno=1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <enturno>
		while(digitalRead(D1));	//Espera a que se suelte el boton
     34e:	8f e0       	ldi	r24, 0x0F	; 15
     350:	0e 94 a2 08 	call	0x1144	; 0x1144 <digitalRead>
     354:	89 2b       	or	r24, r25
     356:	d9 f7       	brne	.-10     	; 0x34e <__vector_4+0x9c>
     358:	10 c0       	rjmp	.+32     	; 0x37a <__vector_4+0xc8>
		//PCIFR=0;				//Limpia la bandera para no volver a entrar en la interrupcion
	}
	else if(digitalRead(D3)==1){	//D3 apaga el mensaje "En turno"
     35a:	81 e1       	ldi	r24, 0x11	; 17
     35c:	0e 94 a2 08 	call	0x1144	; 0x1144 <digitalRead>
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	59 f4       	brne	.+22     	; 0x37a <__vector_4+0xc8>
		enturno=0;
     364:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <enturno>
		digitalWrite(turno,LOW);
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	8b e0       	ldi	r24, 0x0B	; 11
     36c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
		while(digitalRead(D3));	//Espera a que se suelte el boton
     370:	81 e1       	ldi	r24, 0x11	; 17
     372:	0e 94 a2 08 	call	0x1144	; 0x1144 <digitalRead>
     376:	89 2b       	or	r24, r25
     378:	d9 f7       	brne	.-10     	; 0x370 <__vector_4+0xbe>
		//PCIFR=0;				//Limpia la bandera para no volver a entrar en la interrupcion
	}

}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_13>:

ISR(TIMER1_OVF_vect){
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
	TCNT1 = 0xB1E0;		//Precarga para que desborde en 10ms
     3be:	80 ee       	ldi	r24, 0xE0	; 224
     3c0:	91 eb       	ldi	r25, 0xB1	; 177
     3c2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     3c6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	t_auto++;			//Cuenta las veces que desbordo para cambiar el modo cuando esta en automatico
     3ca:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <t_auto>
     3ce:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <t_auto+0x1>
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <t_auto+0x1>
     3d8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <t_auto>
	if(t_auto>5000 && automatico==1){
     3dc:	89 38       	cpi	r24, 0x89	; 137
     3de:	93 41       	sbci	r25, 0x13	; 19
     3e0:	a0 f0       	brcs	.+40     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3e2:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <automatico>
     3e6:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <automatico+0x1>
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	71 f4       	brne	.+28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		modo++;
     3ee:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <modo>
     3f2:	8f 5f       	subi	r24, 0xFF	; 255
		if(modo>CANT_MODOS){modo=0;}
     3f4:	8a 30       	cpi	r24, 0x0A	; 10
     3f6:	18 f4       	brcc	.+6      	; 0x3fe <__vector_13+0x62>

ISR(TIMER1_OVF_vect){
	TCNT1 = 0xB1E0;		//Precarga para que desborde en 10ms
	t_auto++;			//Cuenta las veces que desbordo para cambiar el modo cuando esta en automatico
	if(t_auto>5000 && automatico==1){
		modo++;
     3f8:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <modo>
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		if(modo>CANT_MODOS){modo=0;}
     3fe:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <modo>
		t_auto=0;	
     402:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <t_auto+0x1>
     406:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <t_auto>
	}
	if(modo==6){
     40a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <modo>
     40e:	86 30       	cpi	r24, 0x06	; 6
     410:	61 f4       	brne	.+24     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		latido4a.latir();
     412:	88 ec       	ldi	r24, 0xC8	; 200
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN7corazon5latirEv>
		latido4b.latir();
     41a:	89 eb       	ldi	r24, 0xB9	; 185
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN7corazon5latirEv>
		latido4c.latir();
     422:	8a ea       	ldi	r24, 0xAA	; 170
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN7corazon5latirEv>
	}
	if(modo==7){
     42a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <modo>
     42e:	87 30       	cpi	r24, 0x07	; 7
     430:	61 f4       	brne	.+24     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		PWM5a.oscilar();
     432:	89 e9       	ldi	r24, 0x99	; 153
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN12osciladorPWM7oscilarEv>
		PWM5b.oscilar();
     43a:	88 e8       	ldi	r24, 0x88	; 136
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN12osciladorPWM7oscilarEv>
		PWM5c.oscilar();
     442:	87 e7       	ldi	r24, 0x77	; 119
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN12osciladorPWM7oscilarEv>
	}
	if(modo==8){
     44a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <modo>
     44e:	88 30       	cpi	r24, 0x08	; 8
     450:	61 f4       	brne	.+24     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		PWM6a.oscilar();
     452:	86 e6       	ldi	r24, 0x66	; 102
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN12osciladorPWM7oscilarEv>
		PWM6b.oscilar();
     45a:	85 e5       	ldi	r24, 0x55	; 85
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN12osciladorPWM7oscilarEv>
		PWM6c.oscilar();
     462:	84 e4       	ldi	r24, 0x44	; 68
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN12osciladorPWM7oscilarEv>
	}
	if(modo==9){
     46a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <modo>
     46e:	89 30       	cpi	r24, 0x09	; 9
     470:	61 f4       	brne	.+24     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		PWM7a.oscilar();
     472:	83 e3       	ldi	r24, 0x33	; 51
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN12osciladorPWM7oscilarEv>
		PWM7b.oscilar();
     47a:	82 e2       	ldi	r24, 0x22	; 34
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN12osciladorPWM7oscilarEv>
		//PWM7c.oscilar();
		digitalWrite(circ,HIGH);
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
	}
	if(enturno==1){
     48a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <enturno>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	21 f4       	brne	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		TURNO.oscilar();
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN12osciladorPWM7oscilarEv>
	}

}
     49a:	ff 91       	pop	r31
     49c:	ef 91       	pop	r30
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <setup>:



void setup() {
	//GPIO
	pinMode(cruz1,OUTPUT);
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	85 e0       	ldi	r24, 0x05	; 5
     4c0:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
	pinMode(cruz2,OUTPUT);
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	86 e0       	ldi	r24, 0x06	; 6
     4c8:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
	pinMode(circ,OUTPUT);
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
	pinMode(turno,OUTPUT);
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	8b e0       	ldi	r24, 0x0B	; 11
     4d8:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
	
	pinMode(D0,INPUT);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	8e e0       	ldi	r24, 0x0E	; 14
     4e0:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
	pinMode(D1,INPUT);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	8f e0       	ldi	r24, 0x0F	; 15
     4e8:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
	pinMode(D2,INPUT);
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	80 e1       	ldi	r24, 0x10	; 16
     4f0:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
	pinMode(D3,INPUT);
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	81 e1       	ldi	r24, 0x11	; 17
     4f8:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
	
	//Interrupciones
	PCIFR = 0;	//Baja todas las banderas de interrupcion
     4fc:	1b ba       	out	0x1b, r1	; 27
	PCICR = 0x02;	//Habilita las interrupciones por cambio desde A0 a A5
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = 0x0F;	//Habilita las interrupciones de A0:A4
     504:	9f e0       	ldi	r25, 0x0F	; 15
     506:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	
	//Timers
	TCCR1A = 0;	//NO comienza necesariamente en cero al encender/reiniciar el micro
     50a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x02;	//Prescaler 1:8
     50e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 0x01;	//Interrupcion por overflow
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	
	digitalWrite(cruz1,LOW);
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
	digitalWrite(cruz2,LOW);
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	86 e0       	ldi	r24, 0x06	; 6
     524:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
	digitalWrite(circ,LOW);
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
	digitalWrite(turno,LOW);
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	8b e0       	ldi	r24, 0x0B	; 11
     534:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <digitalWrite>

00000538 <loop>:
}

void loop() {
	switch(modo){
     538:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <modo>
     53c:	82 30       	cpi	r24, 0x02	; 2
     53e:	09 f4       	brne	.+2      	; 0x542 <loop+0xa>
     540:	50 c0       	rjmp	.+160    	; 0x5e2 <loop+0xaa>
     542:	28 f4       	brcc	.+10     	; 0x54e <loop+0x16>
     544:	88 23       	and	r24, r24
     546:	61 f0       	breq	.+24     	; 0x560 <loop+0x28>
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	b1 f0       	breq	.+44     	; 0x578 <loop+0x40>
     54c:	08 95       	ret
     54e:	84 30       	cpi	r24, 0x04	; 4
     550:	09 f4       	brne	.+2      	; 0x554 <loop+0x1c>
     552:	97 c0       	rjmp	.+302    	; 0x682 <loop+0x14a>
     554:	08 f4       	brcc	.+2      	; 0x558 <loop+0x20>
     556:	7a c0       	rjmp	.+244    	; 0x64c <loop+0x114>
     558:	85 30       	cpi	r24, 0x05	; 5
     55a:	09 f4       	brne	.+2      	; 0x55e <loop+0x26>
     55c:	a7 c0       	rjmp	.+334    	; 0x6ac <loop+0x174>
     55e:	08 95       	ret
		case 0:
			digitalWrite(circ,HIGH);
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			digitalWrite(cruz1,HIGH);
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	85 e0       	ldi	r24, 0x05	; 5
     56c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			digitalWrite(cruz2,HIGH);
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	86 e0       	ldi	r24, 0x06	; 6
     574:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <digitalWrite>
		break;
		
		case 1:
			digitalWrite(cruz1,HIGH);
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	85 e0       	ldi	r24, 0x05	; 5
     57c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(500);
     580:	64 ef       	ldi	r22, 0xF4	; 244
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(cruz2,HIGH);
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(500);
     594:	64 ef       	ldi	r22, 0xF4	; 244
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(circ,HIGH);
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(500);
     5a8:	64 ef       	ldi	r22, 0xF4	; 244
     5aa:	71 e0       	ldi	r23, 0x01	; 1
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
		
			digitalWrite(cruz1,LOW);
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	85 e0       	ldi	r24, 0x05	; 5
     5b8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(500);
     5bc:	64 ef       	ldi	r22, 0xF4	; 244
     5be:	71 e0       	ldi	r23, 0x01	; 1
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(cruz2,LOW);
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(500);
     5d0:	64 ef       	ldi	r22, 0xF4	; 244
     5d2:	71 e0       	ldi	r23, 0x01	; 1
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(circ,LOW);
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	7d c0       	rjmp	.+250    	; 0x6dc <loop+0x1a4>
			delay(500);
			break;
		
		case 2:
			digitalWrite(cruz1,HIGH);
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	85 e0       	ldi	r24, 0x05	; 5
     5e6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(200);
     5ea:	68 ec       	ldi	r22, 0xC8	; 200
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(cruz2,HIGH);
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	86 e0       	ldi	r24, 0x06	; 6
     5fa:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(200);
     5fe:	68 ec       	ldi	r22, 0xC8	; 200
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(circ,HIGH);
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(200);
     612:	68 ec       	ldi	r22, 0xC8	; 200
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
		
			digitalWrite(cruz1,LOW);
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	85 e0       	ldi	r24, 0x05	; 5
     622:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(200);
     626:	68 ec       	ldi	r22, 0xC8	; 200
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(cruz2,LOW);
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(200);
     63a:	68 ec       	ldi	r22, 0xC8	; 200
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(circ,LOW);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	14 c0       	rjmp	.+40     	; 0x674 <loop+0x13c>
			delay(200);
			break;

		case 3:
			digitalWrite(cruz1,HIGH);
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	85 e0       	ldi	r24, 0x05	; 5
     650:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			digitalWrite(cruz2,HIGH);
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	86 e0       	ldi	r24, 0x06	; 6
     658:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			digitalWrite(circ,HIGH);
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(200);
     664:	68 ec       	ldi	r22, 0xC8	; 200
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(cruz1,LOW);
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(200);
     678:	68 ec       	ldi	r22, 0xC8	; 200
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	33 c0       	rjmp	.+102    	; 0x6e8 <loop+0x1b0>
			break;

		case 4:
			digitalWrite(cruz1,HIGH);
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	85 e0       	ldi	r24, 0x05	; 5
     686:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			digitalWrite(cruz2,HIGH);
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			digitalWrite(circ,HIGH);
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(200);
     69a:	68 ec       	ldi	r22, 0xC8	; 200
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			digitalWrite(cruz2,LOW);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	86 e0       	ldi	r24, 0x06	; 6
     6aa:	e4 cf       	rjmp	.-56     	; 0x674 <loop+0x13c>
			delay(200);
			break;

		case 5:
			digitalWrite(circ,HIGH);
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			digitalWrite(cruz1,HIGH);
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	85 e0       	ldi	r24, 0x05	; 5
     6b8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			digitalWrite(cruz2,HIGH);
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	86 e0       	ldi	r24, 0x06	; 6
     6c0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(500);
     6c4:	64 ef       	ldi	r22, 0xF4	; 244
     6c6:	71 e0       	ldi	r23, 0x01	; 1
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 38 07 	call	0xe70	; 0xe70 <delay>
			
			digitalWrite(cruz1,LOW);
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	85 e0       	ldi	r24, 0x05	; 5
     6d4:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			digitalWrite(cruz2,LOW);
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	86 e0       	ldi	r24, 0x06	; 6
     6dc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <digitalWrite>
			delay(500);
     6e0:	64 ef       	ldi	r22, 0xF4	; 244
     6e2:	71 e0       	ldi	r23, 0x01	; 1
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0c 94 38 07 	jmp	0xe70	; 0xe70 <delay>

000006ec <_GLOBAL__sub_I_modo>:
		
		default:
		break;
	}

}
     6ec:	2f 92       	push	r2
     6ee:	3f 92       	push	r3
     6f0:	4f 92       	push	r4
     6f2:	5f 92       	push	r5
     6f4:	6f 92       	push	r6
     6f6:	7f 92       	push	r7
     6f8:	8f 92       	push	r8
     6fa:	9f 92       	push	r9
     6fc:	af 92       	push	r10
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
	|----|----|---|--|------|-------|--
	   t0   t1  t2 t3     t4      t5
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	corazon(unsigned char salida, unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e, unsigned char f){
     710:	c8 ec       	ldi	r28, 0xC8	; 200
     712:	d1 e0       	ldi	r29, 0x01	; 1
     714:	1d 86       	std	Y+13, r1	; 0x0d
     716:	1c 86       	std	Y+12, r1	; 0x0c
		pin = salida;
     718:	85 e0       	ldi	r24, 0x05	; 5
     71a:	8e 87       	std	Y+14, r24	; 0x0e
		pinMode(pin,OUTPUT);
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		t0=a;
     722:	19 82       	std	Y+1, r1	; 0x01
     724:	18 82       	st	Y, r1
		t1=t0+b;
     726:	84 e1       	ldi	r24, 0x14	; 20
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	9b 83       	std	Y+3, r25	; 0x03
     72c:	8a 83       	std	Y+2, r24	; 0x02
		t2=t1+c;
     72e:	08 e2       	ldi	r16, 0x28	; 40
     730:	10 e0       	ldi	r17, 0x00	; 0
     732:	1d 83       	std	Y+5, r17	; 0x05
     734:	0c 83       	std	Y+4, r16	; 0x04
		t3=t2+d;
     736:	82 e3       	ldi	r24, 0x32	; 50
     738:	a8 2e       	mov	r10, r24
     73a:	b1 2c       	mov	r11, r1
     73c:	bf 82       	std	Y+7, r11	; 0x07
     73e:	ae 82       	std	Y+6, r10	; 0x06
		t4=t3+e;
     740:	9a e5       	ldi	r25, 0x5A	; 90
     742:	c9 2e       	mov	r12, r25
     744:	d1 2c       	mov	r13, r1
     746:	d9 86       	std	Y+9, r13	; 0x09
     748:	c8 86       	std	Y+8, r12	; 0x08
		t5=t4+f;	//t5=periodo
     74a:	22 e8       	ldi	r18, 0x82	; 130
     74c:	e2 2e       	mov	r14, r18
     74e:	f1 2c       	mov	r15, r1
     750:	fb 86       	std	Y+11, r15	; 0x0b
     752:	ea 86       	std	Y+10, r14	; 0x0a
		t=0;
     754:	1d 86       	std	Y+13, r1	; 0x0d
     756:	1c 86       	std	Y+12, r1	; 0x0c
	|----|----|---|--|------|-------|--
	   t0   t1  t2 t3     t4      t5
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	corazon(unsigned char salida, unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e, unsigned char f){
     758:	c9 eb       	ldi	r28, 0xB9	; 185
     75a:	d1 e0       	ldi	r29, 0x01	; 1
     75c:	1d 86       	std	Y+13, r1	; 0x0d
     75e:	1c 86       	std	Y+12, r1	; 0x0c
		pin = salida;
     760:	96 e0       	ldi	r25, 0x06	; 6
     762:	9e 87       	std	Y+14, r25	; 0x0e
		pinMode(pin,OUTPUT);
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	86 e0       	ldi	r24, 0x06	; 6
     768:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		t0=a;
     76c:	8a e0       	ldi	r24, 0x0A	; 10
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	99 83       	std	Y+1, r25	; 0x01
     772:	88 83       	st	Y, r24
		t1=t0+b;
     774:	8e e1       	ldi	r24, 0x1E	; 30
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	9b 83       	std	Y+3, r25	; 0x03
     77a:	8a 83       	std	Y+2, r24	; 0x02
		t2=t1+c;
     77c:	bd 82       	std	Y+5, r11	; 0x05
     77e:	ac 82       	std	Y+4, r10	; 0x04
		t3=t2+d;
     780:	3c e3       	ldi	r19, 0x3C	; 60
     782:	63 2e       	mov	r6, r19
     784:	71 2c       	mov	r7, r1
     786:	7f 82       	std	Y+7, r7	; 0x07
     788:	6e 82       	std	Y+6, r6	; 0x06
		t4=t3+e;
     78a:	44 e6       	ldi	r20, 0x64	; 100
     78c:	a4 2e       	mov	r10, r20
     78e:	b1 2c       	mov	r11, r1
     790:	b9 86       	std	Y+9, r11	; 0x09
     792:	a8 86       	std	Y+8, r10	; 0x08
		t5=t4+f;	//t5=periodo
     794:	fb 86       	std	Y+11, r15	; 0x0b
     796:	ea 86       	std	Y+10, r14	; 0x0a
		t=0;
     798:	1d 86       	std	Y+13, r1	; 0x0d
     79a:	1c 86       	std	Y+12, r1	; 0x0c
	|----|----|---|--|------|-------|--
	   t0   t1  t2 t3     t4      t5
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	corazon(unsigned char salida, unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e, unsigned char f){
     79c:	ca ea       	ldi	r28, 0xAA	; 170
     79e:	d1 e0       	ldi	r29, 0x01	; 1
     7a0:	1d 86       	std	Y+13, r1	; 0x0d
     7a2:	1c 86       	std	Y+12, r1	; 0x0c
		pin = salida;
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	8e 87       	std	Y+14, r24	; 0x0e
		pinMode(pin,OUTPUT);
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		t0=a;
     7ae:	79 82       	std	Y+1, r7	; 0x01
     7b0:	68 82       	st	Y, r6
		t1=t0+b;
     7b2:	db 82       	std	Y+3, r13	; 0x03
     7b4:	ca 82       	std	Y+2, r12	; 0x02
		t2=t1+c;
     7b6:	58 e7       	ldi	r21, 0x78	; 120
     7b8:	85 2e       	mov	r8, r21
     7ba:	91 2c       	mov	r9, r1
     7bc:	9d 82       	std	Y+5, r9	; 0x05
     7be:	8c 82       	std	Y+4, r8	; 0x04
		t3=t2+d;
     7c0:	9f 82       	std	Y+7, r9	; 0x07
     7c2:	8e 82       	std	Y+6, r8	; 0x06
		t4=t3+e;
     7c4:	99 86       	std	Y+9, r9	; 0x09
     7c6:	88 86       	std	Y+8, r8	; 0x08
		t5=t4+f;	//t5=periodo
     7c8:	fb 86       	std	Y+11, r15	; 0x0b
     7ca:	ea 86       	std	Y+10, r14	; 0x0a
		t=0;
     7cc:	1d 86       	std	Y+13, r1	; 0x0d
     7ce:	1c 86       	std	Y+12, r1	; 0x0c
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     7d0:	c9 e9       	ldi	r28, 0x99	; 153
     7d2:	d1 e0       	ldi	r29, 0x01	; 1
     7d4:	1b 86       	std	Y+11, r1	; 0x0b
     7d6:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     7d8:	95 e0       	ldi	r25, 0x05	; 5
     7da:	98 8b       	std	Y+16, r25	; 0x10
		pinMode(pin,OUTPUT);
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	85 e0       	ldi	r24, 0x05	; 5
     7e0:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     7e4:	c1 2c       	mov	r12, r1
     7e6:	d1 2c       	mov	r13, r1
     7e8:	6f e7       	ldi	r22, 0x7F	; 127
     7ea:	e6 2e       	mov	r14, r22
     7ec:	63 e4       	ldi	r22, 0x43	; 67
     7ee:	f6 2e       	mov	r15, r22
     7f0:	cc 86       	std	Y+12, r12	; 0x0c
     7f2:	dd 86       	std	Y+13, r13	; 0x0d
     7f4:	ee 86       	std	Y+14, r14	; 0x0e
     7f6:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     7f8:	19 82       	std	Y+1, r1	; 0x01
     7fa:	18 82       	st	Y, r1
		t1=t0+dt1;
     7fc:	1b 83       	std	Y+3, r17	; 0x03
     7fe:	0a 83       	std	Y+2, r16	; 0x02
		t2=t1+dt2;
     800:	1d 83       	std	Y+5, r17	; 0x05
     802:	0c 83       	std	Y+4, r16	; 0x04
		t3=t2+dt3;
     804:	70 e5       	ldi	r23, 0x50	; 80
     806:	27 2e       	mov	r2, r23
     808:	31 2c       	mov	r3, r1
     80a:	3f 82       	std	Y+7, r3	; 0x07
     80c:	2e 82       	std	Y+6, r2	; 0x06
		t4=t3+dt4;
     80e:	e0 ef       	ldi	r30, 0xF0	; 240
     810:	4e 2e       	mov	r4, r30
     812:	51 2c       	mov	r5, r1
     814:	59 86       	std	Y+9, r5	; 0x09
     816:	48 86       	std	Y+8, r4	; 0x08
		t=0;
     818:	1b 86       	std	Y+11, r1	; 0x0b
     81a:	1a 86       	std	Y+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     81c:	c8 e8       	ldi	r28, 0x88	; 136
     81e:	d1 e0       	ldi	r29, 0x01	; 1
     820:	1b 86       	std	Y+11, r1	; 0x0b
     822:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     824:	86 e0       	ldi	r24, 0x06	; 6
     826:	88 8b       	std	Y+16, r24	; 0x10
		pinMode(pin,OUTPUT);
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     82e:	cc 86       	std	Y+12, r12	; 0x0c
     830:	dd 86       	std	Y+13, r13	; 0x0d
     832:	ee 86       	std	Y+14, r14	; 0x0e
     834:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     836:	39 82       	std	Y+1, r3	; 0x01
     838:	28 82       	st	Y, r2
		t1=t0+dt1;
     83a:	9b 82       	std	Y+3, r9	; 0x03
     83c:	8a 82       	std	Y+2, r8	; 0x02
		t2=t1+dt2;
     83e:	9d 82       	std	Y+5, r9	; 0x05
     840:	8c 82       	std	Y+4, r8	; 0x04
		t3=t2+dt3;
     842:	80 ea       	ldi	r24, 0xA0	; 160
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	9f 83       	std	Y+7, r25	; 0x07
     848:	8e 83       	std	Y+6, r24	; 0x06
		t4=t3+dt4;
     84a:	59 86       	std	Y+9, r5	; 0x09
     84c:	48 86       	std	Y+8, r4	; 0x08
		t=0;
     84e:	1b 86       	std	Y+11, r1	; 0x0b
     850:	1a 86       	std	Y+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     852:	c7 e7       	ldi	r28, 0x77	; 119
     854:	d1 e0       	ldi	r29, 0x01	; 1
     856:	1b 86       	std	Y+11, r1	; 0x0b
     858:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     85a:	93 e0       	ldi	r25, 0x03	; 3
     85c:	98 8b       	std	Y+16, r25	; 0x10
		pinMode(pin,OUTPUT);
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     866:	cc 86       	std	Y+12, r12	; 0x0c
     868:	dd 86       	std	Y+13, r13	; 0x0d
     86a:	ee 86       	std	Y+14, r14	; 0x0e
     86c:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     86e:	80 ea       	ldi	r24, 0xA0	; 160
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	99 83       	std	Y+1, r25	; 0x01
     874:	88 83       	st	Y, r24
		t1=t0+dt1;
     876:	88 ec       	ldi	r24, 0xC8	; 200
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	9b 83       	std	Y+3, r25	; 0x03
     87c:	8a 83       	std	Y+2, r24	; 0x02
		t2=t1+dt2;
     87e:	9d 83       	std	Y+5, r25	; 0x05
     880:	8c 83       	std	Y+4, r24	; 0x04
		t3=t2+dt3;
     882:	5f 82       	std	Y+7, r5	; 0x07
     884:	4e 82       	std	Y+6, r4	; 0x06
		t4=t3+dt4;
     886:	59 86       	std	Y+9, r5	; 0x09
     888:	48 86       	std	Y+8, r4	; 0x08
		t=0;
     88a:	1b 86       	std	Y+11, r1	; 0x0b
     88c:	1a 86       	std	Y+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     88e:	c6 e6       	ldi	r28, 0x66	; 102
     890:	d1 e0       	ldi	r29, 0x01	; 1
     892:	1b 86       	std	Y+11, r1	; 0x0b
     894:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     896:	95 e0       	ldi	r25, 0x05	; 5
     898:	98 8b       	std	Y+16, r25	; 0x10
		pinMode(pin,OUTPUT);
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	85 e0       	ldi	r24, 0x05	; 5
     89e:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     8a2:	cc 86       	std	Y+12, r12	; 0x0c
     8a4:	dd 86       	std	Y+13, r13	; 0x0d
     8a6:	ee 86       	std	Y+14, r14	; 0x0e
     8a8:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     8aa:	19 82       	std	Y+1, r1	; 0x01
     8ac:	18 82       	st	Y, r1
		t1=t0+dt1;
     8ae:	1b 83       	std	Y+3, r17	; 0x03
     8b0:	0a 83       	std	Y+2, r16	; 0x02
		t2=t1+dt2;
     8b2:	7d 82       	std	Y+5, r7	; 0x05
     8b4:	6c 82       	std	Y+4, r6	; 0x04
		t3=t2+dt3;
     8b6:	bf 82       	std	Y+7, r11	; 0x07
     8b8:	ae 82       	std	Y+6, r10	; 0x06
		t4=t3+dt4;
     8ba:	84 eb       	ldi	r24, 0xB4	; 180
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	99 87       	std	Y+9, r25	; 0x09
     8c0:	88 87       	std	Y+8, r24	; 0x08
		t=0;
     8c2:	1b 86       	std	Y+11, r1	; 0x0b
     8c4:	1a 86       	std	Y+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     8c6:	c5 e5       	ldi	r28, 0x55	; 85
     8c8:	d1 e0       	ldi	r29, 0x01	; 1
     8ca:	1b 86       	std	Y+11, r1	; 0x0b
     8cc:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     8ce:	96 e0       	ldi	r25, 0x06	; 6
     8d0:	98 8b       	std	Y+16, r25	; 0x10
		pinMode(pin,OUTPUT);
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     8da:	cc 86       	std	Y+12, r12	; 0x0c
     8dc:	dd 86       	std	Y+13, r13	; 0x0d
     8de:	ee 86       	std	Y+14, r14	; 0x0e
     8e0:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     8e2:	19 83       	std	Y+1, r17	; 0x01
     8e4:	08 83       	st	Y, r16
		t1=t0+dt1;
     8e6:	3b 82       	std	Y+3, r3	; 0x03
     8e8:	2a 82       	std	Y+2, r2	; 0x02
		t2=t1+dt2;
     8ea:	bd 82       	std	Y+5, r11	; 0x05
     8ec:	ac 82       	std	Y+4, r10	; 0x04
		t3=t2+dt3;
     8ee:	fc e8       	ldi	r31, 0x8C	; 140
     8f0:	4f 2e       	mov	r4, r31
     8f2:	51 2c       	mov	r5, r1
     8f4:	5f 82       	std	Y+7, r5	; 0x07
     8f6:	4e 82       	std	Y+6, r4	; 0x06
		t4=t3+dt4;
     8f8:	84 eb       	ldi	r24, 0xB4	; 180
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	99 87       	std	Y+9, r25	; 0x09
     8fe:	88 87       	std	Y+8, r24	; 0x08
		t=0;
     900:	1b 86       	std	Y+11, r1	; 0x0b
     902:	1a 86       	std	Y+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     904:	c4 e4       	ldi	r28, 0x44	; 68
     906:	d1 e0       	ldi	r29, 0x01	; 1
     908:	1b 86       	std	Y+11, r1	; 0x0b
     90a:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     90c:	93 e0       	ldi	r25, 0x03	; 3
     90e:	98 8b       	std	Y+16, r25	; 0x10
		pinMode(pin,OUTPUT);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     918:	cc 86       	std	Y+12, r12	; 0x0c
     91a:	dd 86       	std	Y+13, r13	; 0x0d
     91c:	ee 86       	std	Y+14, r14	; 0x0e
     91e:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     920:	39 82       	std	Y+1, r3	; 0x01
     922:	28 82       	st	Y, r2
		t1=t0+dt1;
     924:	9b 82       	std	Y+3, r9	; 0x03
     926:	8a 82       	std	Y+2, r8	; 0x02
		t2=t1+dt2;
     928:	5d 82       	std	Y+5, r5	; 0x05
     92a:	4c 82       	std	Y+4, r4	; 0x04
		t3=t2+dt3;
     92c:	84 eb       	ldi	r24, 0xB4	; 180
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	9f 83       	std	Y+7, r25	; 0x07
     932:	8e 83       	std	Y+6, r24	; 0x06
		t4=t3+dt4;
     934:	99 87       	std	Y+9, r25	; 0x09
     936:	88 87       	std	Y+8, r24	; 0x08
		t=0;
     938:	1b 86       	std	Y+11, r1	; 0x0b
     93a:	1a 86       	std	Y+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     93c:	c3 e3       	ldi	r28, 0x33	; 51
     93e:	d1 e0       	ldi	r29, 0x01	; 1
     940:	1b 86       	std	Y+11, r1	; 0x0b
     942:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     944:	95 e0       	ldi	r25, 0x05	; 5
     946:	98 8b       	std	Y+16, r25	; 0x10
		pinMode(pin,OUTPUT);
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	85 e0       	ldi	r24, 0x05	; 5
     94c:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     950:	cc 86       	std	Y+12, r12	; 0x0c
     952:	dd 86       	std	Y+13, r13	; 0x0d
     954:	ee 86       	std	Y+14, r14	; 0x0e
     956:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     958:	19 82       	std	Y+1, r1	; 0x01
     95a:	18 82       	st	Y, r1
		t1=t0+dt1;
     95c:	1b 83       	std	Y+3, r17	; 0x03
     95e:	0a 83       	std	Y+2, r16	; 0x02
		t2=t1+dt2;
     960:	7d 82       	std	Y+5, r7	; 0x05
     962:	6c 82       	std	Y+4, r6	; 0x04
		t3=t2+dt3;
     964:	bf 82       	std	Y+7, r11	; 0x07
     966:	ae 82       	std	Y+6, r10	; 0x06
		t4=t3+dt4;
     968:	59 86       	std	Y+9, r5	; 0x09
     96a:	48 86       	std	Y+8, r4	; 0x08
		t=0;
     96c:	1b 86       	std	Y+11, r1	; 0x0b
     96e:	1a 86       	std	Y+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     970:	c2 e2       	ldi	r28, 0x22	; 34
     972:	d1 e0       	ldi	r29, 0x01	; 1
     974:	1b 86       	std	Y+11, r1	; 0x0b
     976:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     978:	86 e0       	ldi	r24, 0x06	; 6
     97a:	88 8b       	std	Y+16, r24	; 0x10
		pinMode(pin,OUTPUT);
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     982:	cc 86       	std	Y+12, r12	; 0x0c
     984:	dd 86       	std	Y+13, r13	; 0x0d
     986:	ee 86       	std	Y+14, r14	; 0x0e
     988:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     98a:	19 82       	std	Y+1, r1	; 0x01
     98c:	18 82       	st	Y, r1
		t1=t0+dt1;
     98e:	1b 83       	std	Y+3, r17	; 0x03
     990:	0a 83       	std	Y+2, r16	; 0x02
		t2=t1+dt2;
     992:	7d 82       	std	Y+5, r7	; 0x05
     994:	6c 82       	std	Y+4, r6	; 0x04
		t3=t2+dt3;
     996:	bf 82       	std	Y+7, r11	; 0x07
     998:	ae 82       	std	Y+6, r10	; 0x06
		t4=t3+dt4;
     99a:	59 86       	std	Y+9, r5	; 0x09
     99c:	48 86       	std	Y+8, r4	; 0x08
		t=0;
     99e:	1b 86       	std	Y+11, r1	; 0x0b
     9a0:	1a 86       	std	Y+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     9a2:	c1 e1       	ldi	r28, 0x11	; 17
     9a4:	d1 e0       	ldi	r29, 0x01	; 1
     9a6:	1b 86       	std	Y+11, r1	; 0x0b
     9a8:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     9aa:	93 e0       	ldi	r25, 0x03	; 3
     9ac:	98 8b       	std	Y+16, r25	; 0x10
		pinMode(pin,OUTPUT);
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     9b6:	cc 86       	std	Y+12, r12	; 0x0c
     9b8:	dd 86       	std	Y+13, r13	; 0x0d
     9ba:	ee 86       	std	Y+14, r14	; 0x0e
     9bc:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     9be:	19 82       	std	Y+1, r1	; 0x01
     9c0:	18 82       	st	Y, r1
		t1=t0+dt1;
     9c2:	1b 83       	std	Y+3, r17	; 0x03
     9c4:	0a 83       	std	Y+2, r16	; 0x02
		t2=t1+dt2;
     9c6:	7d 82       	std	Y+5, r7	; 0x05
     9c8:	6c 82       	std	Y+4, r6	; 0x04
		t3=t2+dt3;
     9ca:	bf 82       	std	Y+7, r11	; 0x07
     9cc:	ae 82       	std	Y+6, r10	; 0x06
		t4=t3+dt4;
     9ce:	59 86       	std	Y+9, r5	; 0x09
     9d0:	48 86       	std	Y+8, r4	; 0x08
		t=0;
     9d2:	1b 86       	std	Y+11, r1	; 0x0b
     9d4:	1a 86       	std	Y+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
     9d6:	c0 e0       	ldi	r28, 0x00	; 0
     9d8:	d1 e0       	ldi	r29, 0x01	; 1
     9da:	1b 86       	std	Y+11, r1	; 0x0b
     9dc:	1a 86       	std	Y+10, r1	; 0x0a
		pin = salida;
     9de:	8b e0       	ldi	r24, 0x0B	; 11
     9e0:	88 8b       	std	Y+16, r24	; 0x10
		pinMode(pin,OUTPUT);
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
		PWM_MAX = maximo;
     9e8:	cc 86       	std	Y+12, r12	; 0x0c
     9ea:	dd 86       	std	Y+13, r13	; 0x0d
     9ec:	ee 86       	std	Y+14, r14	; 0x0e
     9ee:	ff 86       	std	Y+15, r15	; 0x0f
		
		t0=dt0;
     9f0:	19 82       	std	Y+1, r1	; 0x01
     9f2:	18 82       	st	Y, r1
		t1=t0+dt1;
     9f4:	bb 82       	std	Y+3, r11	; 0x03
     9f6:	aa 82       	std	Y+2, r10	; 0x02
		t2=t1+dt2;
     9f8:	88 ec       	ldi	r24, 0xC8	; 200
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	9d 83       	std	Y+5, r25	; 0x05
     9fe:	8c 83       	std	Y+4, r24	; 0x04
		t3=t2+dt3;
     a00:	8c e2       	ldi	r24, 0x2C	; 44
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	9f 83       	std	Y+7, r25	; 0x07
     a06:	8e 83       	std	Y+6, r24	; 0x06
		t4=t3+dt4;
     a08:	80 e9       	ldi	r24, 0x90	; 144
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	99 87       	std	Y+9, r25	; 0x09
     a0e:	88 87       	std	Y+8, r24	; 0x08
		t=0;
     a10:	1b 86       	std	Y+11, r1	; 0x0b
     a12:	1a 86       	std	Y+10, r1	; 0x0a
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	7f 90       	pop	r7
     a2e:	6f 90       	pop	r6
     a30:	5f 90       	pop	r5
     a32:	4f 90       	pop	r4
     a34:	3f 90       	pop	r3
     a36:	2f 90       	pop	r2
     a38:	08 95       	ret

00000a3a <__divsf3>:
     a3a:	0e 94 31 05 	call	0xa62	; 0xa62 <__divsf3x>
     a3e:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_round>
     a42:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_pscB>
     a46:	58 f0       	brcs	.+22     	; 0xa5e <__divsf3+0x24>
     a48:	0e 94 04 06 	call	0xc08	; 0xc08 <__fp_pscA>
     a4c:	40 f0       	brcs	.+16     	; 0xa5e <__divsf3+0x24>
     a4e:	29 f4       	brne	.+10     	; 0xa5a <__divsf3+0x20>
     a50:	5f 3f       	cpi	r21, 0xFF	; 255
     a52:	29 f0       	breq	.+10     	; 0xa5e <__divsf3+0x24>
     a54:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_inf>
     a58:	51 11       	cpse	r21, r1
     a5a:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_szero>
     a5e:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_nan>

00000a62 <__divsf3x>:
     a62:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_split3>
     a66:	68 f3       	brcs	.-38     	; 0xa42 <__divsf3+0x8>

00000a68 <__divsf3_pse>:
     a68:	99 23       	and	r25, r25
     a6a:	b1 f3       	breq	.-20     	; 0xa58 <__divsf3+0x1e>
     a6c:	55 23       	and	r21, r21
     a6e:	91 f3       	breq	.-28     	; 0xa54 <__divsf3+0x1a>
     a70:	95 1b       	sub	r25, r21
     a72:	55 0b       	sbc	r21, r21
     a74:	bb 27       	eor	r27, r27
     a76:	aa 27       	eor	r26, r26
     a78:	62 17       	cp	r22, r18
     a7a:	73 07       	cpc	r23, r19
     a7c:	84 07       	cpc	r24, r20
     a7e:	38 f0       	brcs	.+14     	; 0xa8e <__divsf3_pse+0x26>
     a80:	9f 5f       	subi	r25, 0xFF	; 255
     a82:	5f 4f       	sbci	r21, 0xFF	; 255
     a84:	22 0f       	add	r18, r18
     a86:	33 1f       	adc	r19, r19
     a88:	44 1f       	adc	r20, r20
     a8a:	aa 1f       	adc	r26, r26
     a8c:	a9 f3       	breq	.-22     	; 0xa78 <__divsf3_pse+0x10>
     a8e:	35 d0       	rcall	.+106    	; 0xafa <__divsf3_pse+0x92>
     a90:	0e 2e       	mov	r0, r30
     a92:	3a f0       	brmi	.+14     	; 0xaa2 <__divsf3_pse+0x3a>
     a94:	e0 e8       	ldi	r30, 0x80	; 128
     a96:	32 d0       	rcall	.+100    	; 0xafc <__divsf3_pse+0x94>
     a98:	91 50       	subi	r25, 0x01	; 1
     a9a:	50 40       	sbci	r21, 0x00	; 0
     a9c:	e6 95       	lsr	r30
     a9e:	00 1c       	adc	r0, r0
     aa0:	ca f7       	brpl	.-14     	; 0xa94 <__divsf3_pse+0x2c>
     aa2:	2b d0       	rcall	.+86     	; 0xafa <__divsf3_pse+0x92>
     aa4:	fe 2f       	mov	r31, r30
     aa6:	29 d0       	rcall	.+82     	; 0xafa <__divsf3_pse+0x92>
     aa8:	66 0f       	add	r22, r22
     aaa:	77 1f       	adc	r23, r23
     aac:	88 1f       	adc	r24, r24
     aae:	bb 1f       	adc	r27, r27
     ab0:	26 17       	cp	r18, r22
     ab2:	37 07       	cpc	r19, r23
     ab4:	48 07       	cpc	r20, r24
     ab6:	ab 07       	cpc	r26, r27
     ab8:	b0 e8       	ldi	r27, 0x80	; 128
     aba:	09 f0       	breq	.+2      	; 0xabe <__divsf3_pse+0x56>
     abc:	bb 0b       	sbc	r27, r27
     abe:	80 2d       	mov	r24, r0
     ac0:	bf 01       	movw	r22, r30
     ac2:	ff 27       	eor	r31, r31
     ac4:	93 58       	subi	r25, 0x83	; 131
     ac6:	5f 4f       	sbci	r21, 0xFF	; 255
     ac8:	3a f0       	brmi	.+14     	; 0xad8 <__divsf3_pse+0x70>
     aca:	9e 3f       	cpi	r25, 0xFE	; 254
     acc:	51 05       	cpc	r21, r1
     ace:	78 f0       	brcs	.+30     	; 0xaee <__divsf3_pse+0x86>
     ad0:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_inf>
     ad4:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_szero>
     ad8:	5f 3f       	cpi	r21, 0xFF	; 255
     ada:	e4 f3       	brlt	.-8      	; 0xad4 <__divsf3_pse+0x6c>
     adc:	98 3e       	cpi	r25, 0xE8	; 232
     ade:	d4 f3       	brlt	.-12     	; 0xad4 <__divsf3_pse+0x6c>
     ae0:	86 95       	lsr	r24
     ae2:	77 95       	ror	r23
     ae4:	67 95       	ror	r22
     ae6:	b7 95       	ror	r27
     ae8:	f7 95       	ror	r31
     aea:	9f 5f       	subi	r25, 0xFF	; 255
     aec:	c9 f7       	brne	.-14     	; 0xae0 <__divsf3_pse+0x78>
     aee:	88 0f       	add	r24, r24
     af0:	91 1d       	adc	r25, r1
     af2:	96 95       	lsr	r25
     af4:	87 95       	ror	r24
     af6:	97 f9       	bld	r25, 7
     af8:	08 95       	ret
     afa:	e1 e0       	ldi	r30, 0x01	; 1
     afc:	66 0f       	add	r22, r22
     afe:	77 1f       	adc	r23, r23
     b00:	88 1f       	adc	r24, r24
     b02:	bb 1f       	adc	r27, r27
     b04:	62 17       	cp	r22, r18
     b06:	73 07       	cpc	r23, r19
     b08:	84 07       	cpc	r24, r20
     b0a:	ba 07       	cpc	r27, r26
     b0c:	20 f0       	brcs	.+8      	; 0xb16 <__divsf3_pse+0xae>
     b0e:	62 1b       	sub	r22, r18
     b10:	73 0b       	sbc	r23, r19
     b12:	84 0b       	sbc	r24, r20
     b14:	ba 0b       	sbc	r27, r26
     b16:	ee 1f       	adc	r30, r30
     b18:	88 f7       	brcc	.-30     	; 0xafc <__divsf3_pse+0x94>
     b1a:	e0 95       	com	r30
     b1c:	08 95       	ret

00000b1e <__fixunssfsi>:
     b1e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_splitA>
     b22:	88 f0       	brcs	.+34     	; 0xb46 <__fixunssfsi+0x28>
     b24:	9f 57       	subi	r25, 0x7F	; 127
     b26:	98 f0       	brcs	.+38     	; 0xb4e <__fixunssfsi+0x30>
     b28:	b9 2f       	mov	r27, r25
     b2a:	99 27       	eor	r25, r25
     b2c:	b7 51       	subi	r27, 0x17	; 23
     b2e:	b0 f0       	brcs	.+44     	; 0xb5c <__fixunssfsi+0x3e>
     b30:	e1 f0       	breq	.+56     	; 0xb6a <__fixunssfsi+0x4c>
     b32:	66 0f       	add	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	88 1f       	adc	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	1a f0       	brmi	.+6      	; 0xb42 <__fixunssfsi+0x24>
     b3c:	ba 95       	dec	r27
     b3e:	c9 f7       	brne	.-14     	; 0xb32 <__fixunssfsi+0x14>
     b40:	14 c0       	rjmp	.+40     	; 0xb6a <__fixunssfsi+0x4c>
     b42:	b1 30       	cpi	r27, 0x01	; 1
     b44:	91 f0       	breq	.+36     	; 0xb6a <__fixunssfsi+0x4c>
     b46:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fp_zero>
     b4a:	b1 e0       	ldi	r27, 0x01	; 1
     b4c:	08 95       	ret
     b4e:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__fp_zero>
     b52:	67 2f       	mov	r22, r23
     b54:	78 2f       	mov	r23, r24
     b56:	88 27       	eor	r24, r24
     b58:	b8 5f       	subi	r27, 0xF8	; 248
     b5a:	39 f0       	breq	.+14     	; 0xb6a <__fixunssfsi+0x4c>
     b5c:	b9 3f       	cpi	r27, 0xF9	; 249
     b5e:	cc f3       	brlt	.-14     	; 0xb52 <__fixunssfsi+0x34>
     b60:	86 95       	lsr	r24
     b62:	77 95       	ror	r23
     b64:	67 95       	ror	r22
     b66:	b3 95       	inc	r27
     b68:	d9 f7       	brne	.-10     	; 0xb60 <__fixunssfsi+0x42>
     b6a:	3e f4       	brtc	.+14     	; 0xb7a <__fixunssfsi+0x5c>
     b6c:	90 95       	com	r25
     b6e:	80 95       	com	r24
     b70:	70 95       	com	r23
     b72:	61 95       	neg	r22
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	8f 4f       	sbci	r24, 0xFF	; 255
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	08 95       	ret

00000b7c <__floatunsisf>:
     b7c:	e8 94       	clt
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__floatsisf+0x12>

00000b80 <__floatsisf>:
     b80:	97 fb       	bst	r25, 7
     b82:	3e f4       	brtc	.+14     	; 0xb92 <__floatsisf+0x12>
     b84:	90 95       	com	r25
     b86:	80 95       	com	r24
     b88:	70 95       	com	r23
     b8a:	61 95       	neg	r22
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	8f 4f       	sbci	r24, 0xFF	; 255
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	99 23       	and	r25, r25
     b94:	a9 f0       	breq	.+42     	; 0xbc0 <__floatsisf+0x40>
     b96:	f9 2f       	mov	r31, r25
     b98:	96 e9       	ldi	r25, 0x96	; 150
     b9a:	bb 27       	eor	r27, r27
     b9c:	93 95       	inc	r25
     b9e:	f6 95       	lsr	r31
     ba0:	87 95       	ror	r24
     ba2:	77 95       	ror	r23
     ba4:	67 95       	ror	r22
     ba6:	b7 95       	ror	r27
     ba8:	f1 11       	cpse	r31, r1
     baa:	f8 cf       	rjmp	.-16     	; 0xb9c <__floatsisf+0x1c>
     bac:	fa f4       	brpl	.+62     	; 0xbec <__floatsisf+0x6c>
     bae:	bb 0f       	add	r27, r27
     bb0:	11 f4       	brne	.+4      	; 0xbb6 <__floatsisf+0x36>
     bb2:	60 ff       	sbrs	r22, 0
     bb4:	1b c0       	rjmp	.+54     	; 0xbec <__floatsisf+0x6c>
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	8f 4f       	sbci	r24, 0xFF	; 255
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	16 c0       	rjmp	.+44     	; 0xbec <__floatsisf+0x6c>
     bc0:	88 23       	and	r24, r24
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <__floatsisf+0x48>
     bc4:	96 e9       	ldi	r25, 0x96	; 150
     bc6:	11 c0       	rjmp	.+34     	; 0xbea <__floatsisf+0x6a>
     bc8:	77 23       	and	r23, r23
     bca:	21 f0       	breq	.+8      	; 0xbd4 <__floatsisf+0x54>
     bcc:	9e e8       	ldi	r25, 0x8E	; 142
     bce:	87 2f       	mov	r24, r23
     bd0:	76 2f       	mov	r23, r22
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <__floatsisf+0x5e>
     bd4:	66 23       	and	r22, r22
     bd6:	71 f0       	breq	.+28     	; 0xbf4 <__floatsisf+0x74>
     bd8:	96 e8       	ldi	r25, 0x86	; 134
     bda:	86 2f       	mov	r24, r22
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	2a f0       	brmi	.+10     	; 0xbec <__floatsisf+0x6c>
     be2:	9a 95       	dec	r25
     be4:	66 0f       	add	r22, r22
     be6:	77 1f       	adc	r23, r23
     be8:	88 1f       	adc	r24, r24
     bea:	da f7       	brpl	.-10     	; 0xbe2 <__floatsisf+0x62>
     bec:	88 0f       	add	r24, r24
     bee:	96 95       	lsr	r25
     bf0:	87 95       	ror	r24
     bf2:	97 f9       	bld	r25, 7
     bf4:	08 95       	ret

00000bf6 <__fp_inf>:
     bf6:	97 f9       	bld	r25, 7
     bf8:	9f 67       	ori	r25, 0x7F	; 127
     bfa:	80 e8       	ldi	r24, 0x80	; 128
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	08 95       	ret

00000c02 <__fp_nan>:
     c02:	9f ef       	ldi	r25, 0xFF	; 255
     c04:	80 ec       	ldi	r24, 0xC0	; 192
     c06:	08 95       	ret

00000c08 <__fp_pscA>:
     c08:	00 24       	eor	r0, r0
     c0a:	0a 94       	dec	r0
     c0c:	16 16       	cp	r1, r22
     c0e:	17 06       	cpc	r1, r23
     c10:	18 06       	cpc	r1, r24
     c12:	09 06       	cpc	r0, r25
     c14:	08 95       	ret

00000c16 <__fp_pscB>:
     c16:	00 24       	eor	r0, r0
     c18:	0a 94       	dec	r0
     c1a:	12 16       	cp	r1, r18
     c1c:	13 06       	cpc	r1, r19
     c1e:	14 06       	cpc	r1, r20
     c20:	05 06       	cpc	r0, r21
     c22:	08 95       	ret

00000c24 <__fp_round>:
     c24:	09 2e       	mov	r0, r25
     c26:	03 94       	inc	r0
     c28:	00 0c       	add	r0, r0
     c2a:	11 f4       	brne	.+4      	; 0xc30 <__fp_round+0xc>
     c2c:	88 23       	and	r24, r24
     c2e:	52 f0       	brmi	.+20     	; 0xc44 <__fp_round+0x20>
     c30:	bb 0f       	add	r27, r27
     c32:	40 f4       	brcc	.+16     	; 0xc44 <__fp_round+0x20>
     c34:	bf 2b       	or	r27, r31
     c36:	11 f4       	brne	.+4      	; 0xc3c <__fp_round+0x18>
     c38:	60 ff       	sbrs	r22, 0
     c3a:	04 c0       	rjmp	.+8      	; 0xc44 <__fp_round+0x20>
     c3c:	6f 5f       	subi	r22, 0xFF	; 255
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	8f 4f       	sbci	r24, 0xFF	; 255
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	08 95       	ret

00000c46 <__fp_split3>:
     c46:	57 fd       	sbrc	r21, 7
     c48:	90 58       	subi	r25, 0x80	; 128
     c4a:	44 0f       	add	r20, r20
     c4c:	55 1f       	adc	r21, r21
     c4e:	59 f0       	breq	.+22     	; 0xc66 <__fp_splitA+0x10>
     c50:	5f 3f       	cpi	r21, 0xFF	; 255
     c52:	71 f0       	breq	.+28     	; 0xc70 <__fp_splitA+0x1a>
     c54:	47 95       	ror	r20

00000c56 <__fp_splitA>:
     c56:	88 0f       	add	r24, r24
     c58:	97 fb       	bst	r25, 7
     c5a:	99 1f       	adc	r25, r25
     c5c:	61 f0       	breq	.+24     	; 0xc76 <__fp_splitA+0x20>
     c5e:	9f 3f       	cpi	r25, 0xFF	; 255
     c60:	79 f0       	breq	.+30     	; 0xc80 <__fp_splitA+0x2a>
     c62:	87 95       	ror	r24
     c64:	08 95       	ret
     c66:	12 16       	cp	r1, r18
     c68:	13 06       	cpc	r1, r19
     c6a:	14 06       	cpc	r1, r20
     c6c:	55 1f       	adc	r21, r21
     c6e:	f2 cf       	rjmp	.-28     	; 0xc54 <__fp_split3+0xe>
     c70:	46 95       	lsr	r20
     c72:	f1 df       	rcall	.-30     	; 0xc56 <__fp_splitA>
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <__fp_splitA+0x30>
     c76:	16 16       	cp	r1, r22
     c78:	17 06       	cpc	r1, r23
     c7a:	18 06       	cpc	r1, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	f1 cf       	rjmp	.-30     	; 0xc62 <__fp_splitA+0xc>
     c80:	86 95       	lsr	r24
     c82:	71 05       	cpc	r23, r1
     c84:	61 05       	cpc	r22, r1
     c86:	08 94       	sec
     c88:	08 95       	ret

00000c8a <__fp_zero>:
     c8a:	e8 94       	clt

00000c8c <__fp_szero>:
     c8c:	bb 27       	eor	r27, r27
     c8e:	66 27       	eor	r22, r22
     c90:	77 27       	eor	r23, r23
     c92:	cb 01       	movw	r24, r22
     c94:	97 f9       	bld	r25, 7
     c96:	08 95       	ret

00000c98 <__mulsf3>:
     c98:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__mulsf3x>
     c9c:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_round>
     ca0:	0e 94 04 06 	call	0xc08	; 0xc08 <__fp_pscA>
     ca4:	38 f0       	brcs	.+14     	; 0xcb4 <__mulsf3+0x1c>
     ca6:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_pscB>
     caa:	20 f0       	brcs	.+8      	; 0xcb4 <__mulsf3+0x1c>
     cac:	95 23       	and	r25, r21
     cae:	11 f0       	breq	.+4      	; 0xcb4 <__mulsf3+0x1c>
     cb0:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_inf>
     cb4:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_nan>
     cb8:	11 24       	eor	r1, r1
     cba:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_szero>

00000cbe <__mulsf3x>:
     cbe:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_split3>
     cc2:	70 f3       	brcs	.-36     	; 0xca0 <__mulsf3+0x8>

00000cc4 <__mulsf3_pse>:
     cc4:	95 9f       	mul	r25, r21
     cc6:	c1 f3       	breq	.-16     	; 0xcb8 <__mulsf3+0x20>
     cc8:	95 0f       	add	r25, r21
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	55 1f       	adc	r21, r21
     cce:	62 9f       	mul	r22, r18
     cd0:	f0 01       	movw	r30, r0
     cd2:	72 9f       	mul	r23, r18
     cd4:	bb 27       	eor	r27, r27
     cd6:	f0 0d       	add	r31, r0
     cd8:	b1 1d       	adc	r27, r1
     cda:	63 9f       	mul	r22, r19
     cdc:	aa 27       	eor	r26, r26
     cde:	f0 0d       	add	r31, r0
     ce0:	b1 1d       	adc	r27, r1
     ce2:	aa 1f       	adc	r26, r26
     ce4:	64 9f       	mul	r22, r20
     ce6:	66 27       	eor	r22, r22
     ce8:	b0 0d       	add	r27, r0
     cea:	a1 1d       	adc	r26, r1
     cec:	66 1f       	adc	r22, r22
     cee:	82 9f       	mul	r24, r18
     cf0:	22 27       	eor	r18, r18
     cf2:	b0 0d       	add	r27, r0
     cf4:	a1 1d       	adc	r26, r1
     cf6:	62 1f       	adc	r22, r18
     cf8:	73 9f       	mul	r23, r19
     cfa:	b0 0d       	add	r27, r0
     cfc:	a1 1d       	adc	r26, r1
     cfe:	62 1f       	adc	r22, r18
     d00:	83 9f       	mul	r24, r19
     d02:	a0 0d       	add	r26, r0
     d04:	61 1d       	adc	r22, r1
     d06:	22 1f       	adc	r18, r18
     d08:	74 9f       	mul	r23, r20
     d0a:	33 27       	eor	r19, r19
     d0c:	a0 0d       	add	r26, r0
     d0e:	61 1d       	adc	r22, r1
     d10:	23 1f       	adc	r18, r19
     d12:	84 9f       	mul	r24, r20
     d14:	60 0d       	add	r22, r0
     d16:	21 1d       	adc	r18, r1
     d18:	82 2f       	mov	r24, r18
     d1a:	76 2f       	mov	r23, r22
     d1c:	6a 2f       	mov	r22, r26
     d1e:	11 24       	eor	r1, r1
     d20:	9f 57       	subi	r25, 0x7F	; 127
     d22:	50 40       	sbci	r21, 0x00	; 0
     d24:	9a f0       	brmi	.+38     	; 0xd4c <__mulsf3_pse+0x88>
     d26:	f1 f0       	breq	.+60     	; 0xd64 <__mulsf3_pse+0xa0>
     d28:	88 23       	and	r24, r24
     d2a:	4a f0       	brmi	.+18     	; 0xd3e <__mulsf3_pse+0x7a>
     d2c:	ee 0f       	add	r30, r30
     d2e:	ff 1f       	adc	r31, r31
     d30:	bb 1f       	adc	r27, r27
     d32:	66 1f       	adc	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	88 1f       	adc	r24, r24
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	50 40       	sbci	r21, 0x00	; 0
     d3c:	a9 f7       	brne	.-22     	; 0xd28 <__mulsf3_pse+0x64>
     d3e:	9e 3f       	cpi	r25, 0xFE	; 254
     d40:	51 05       	cpc	r21, r1
     d42:	80 f0       	brcs	.+32     	; 0xd64 <__mulsf3_pse+0xa0>
     d44:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_inf>
     d48:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_szero>
     d4c:	5f 3f       	cpi	r21, 0xFF	; 255
     d4e:	e4 f3       	brlt	.-8      	; 0xd48 <__mulsf3_pse+0x84>
     d50:	98 3e       	cpi	r25, 0xE8	; 232
     d52:	d4 f3       	brlt	.-12     	; 0xd48 <__mulsf3_pse+0x84>
     d54:	86 95       	lsr	r24
     d56:	77 95       	ror	r23
     d58:	67 95       	ror	r22
     d5a:	b7 95       	ror	r27
     d5c:	f7 95       	ror	r31
     d5e:	e7 95       	ror	r30
     d60:	9f 5f       	subi	r25, 0xFF	; 255
     d62:	c1 f7       	brne	.-16     	; 0xd54 <__mulsf3_pse+0x90>
     d64:	fe 2b       	or	r31, r30
     d66:	88 0f       	add	r24, r24
     d68:	91 1d       	adc	r25, r1
     d6a:	96 95       	lsr	r25
     d6c:	87 95       	ror	r24
     d6e:	97 f9       	bld	r25, 7
     d70:	08 95       	ret

00000d72 <initVariant>:
     d72:	08 95       	ret

00000d74 <main>:
     d74:	0e 94 74 07 	call	0xee8	; 0xee8 <init>
     d78:	0e 94 b9 06 	call	0xd72	; 0xd72 <initVariant>
     d7c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <setup>
     d80:	c0 e0       	ldi	r28, 0x00	; 0
     d82:	d0 e0       	ldi	r29, 0x00	; 0
     d84:	0e 94 9c 02 	call	0x538	; 0x538 <loop>
     d88:	20 97       	sbiw	r28, 0x00	; 0
     d8a:	e1 f3       	breq	.-8      	; 0xd84 <main+0x10>
     d8c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d90:	f9 cf       	rjmp	.-14     	; 0xd84 <main+0x10>

00000d92 <__vector_16>:
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	2f 93       	push	r18
     d9e:	3f 93       	push	r19
     da0:	8f 93       	push	r24
     da2:	9f 93       	push	r25
     da4:	af 93       	push	r26
     da6:	bf 93       	push	r27
     da8:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <timer0_millis>
     dac:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <timer0_millis+0x1>
     db0:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <timer0_millis+0x2>
     db4:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <timer0_millis+0x3>
     db8:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <timer0_fract>
     dbc:	23 e0       	ldi	r18, 0x03	; 3
     dbe:	23 0f       	add	r18, r19
     dc0:	2d 37       	cpi	r18, 0x7D	; 125
     dc2:	20 f4       	brcc	.+8      	; 0xdcc <__vector_16+0x3a>
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	a1 1d       	adc	r26, r1
     dc8:	b1 1d       	adc	r27, r1
     dca:	05 c0       	rjmp	.+10     	; 0xdd6 <__vector_16+0x44>
     dcc:	26 e8       	ldi	r18, 0x86	; 134
     dce:	23 0f       	add	r18, r19
     dd0:	02 96       	adiw	r24, 0x02	; 2
     dd2:	a1 1d       	adc	r26, r1
     dd4:	b1 1d       	adc	r27, r1
     dd6:	20 93 dd 01 	sts	0x01DD, r18	; 0x8001dd <timer0_fract>
     dda:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <timer0_millis>
     dde:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <timer0_millis+0x1>
     de2:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <timer0_millis+0x2>
     de6:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <timer0_millis+0x3>
     dea:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <timer0_overflow_count>
     dee:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <timer0_overflow_count+0x1>
     df2:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <timer0_overflow_count+0x2>
     df6:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <timer0_overflow_count+0x3>
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	a1 1d       	adc	r26, r1
     dfe:	b1 1d       	adc	r27, r1
     e00:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <timer0_overflow_count>
     e04:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <timer0_overflow_count+0x1>
     e08:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <timer0_overflow_count+0x2>
     e0c:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <timer0_overflow_count+0x3>
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti

00000e26 <micros>:
     e26:	3f b7       	in	r19, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <timer0_overflow_count>
     e2e:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <timer0_overflow_count+0x1>
     e32:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <timer0_overflow_count+0x2>
     e36:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <timer0_overflow_count+0x3>
     e3a:	26 b5       	in	r18, 0x26	; 38
     e3c:	a8 9b       	sbis	0x15, 0	; 21
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <micros+0x24>
     e40:	2f 3f       	cpi	r18, 0xFF	; 255
     e42:	19 f0       	breq	.+6      	; 0xe4a <micros+0x24>
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	a1 1d       	adc	r26, r1
     e48:	b1 1d       	adc	r27, r1
     e4a:	3f bf       	out	0x3f, r19	; 63
     e4c:	ba 2f       	mov	r27, r26
     e4e:	a9 2f       	mov	r26, r25
     e50:	98 2f       	mov	r25, r24
     e52:	88 27       	eor	r24, r24
     e54:	82 0f       	add	r24, r18
     e56:	91 1d       	adc	r25, r1
     e58:	a1 1d       	adc	r26, r1
     e5a:	b1 1d       	adc	r27, r1
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	42 e0       	ldi	r20, 0x02	; 2
     e62:	66 0f       	add	r22, r22
     e64:	77 1f       	adc	r23, r23
     e66:	88 1f       	adc	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	4a 95       	dec	r20
     e6c:	d1 f7       	brne	.-12     	; 0xe62 <micros+0x3c>
     e6e:	08 95       	ret

00000e70 <delay>:
     e70:	8f 92       	push	r8
     e72:	9f 92       	push	r9
     e74:	af 92       	push	r10
     e76:	bf 92       	push	r11
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	6b 01       	movw	r12, r22
     e82:	7c 01       	movw	r14, r24
     e84:	0e 94 13 07 	call	0xe26	; 0xe26 <micros>
     e88:	4b 01       	movw	r8, r22
     e8a:	5c 01       	movw	r10, r24
     e8c:	c1 14       	cp	r12, r1
     e8e:	d1 04       	cpc	r13, r1
     e90:	e1 04       	cpc	r14, r1
     e92:	f1 04       	cpc	r15, r1
     e94:	01 f1       	breq	.+64     	; 0xed6 <delay+0x66>
     e96:	0e 94 cb 08 	call	0x1196	; 0x1196 <yield>
     e9a:	0e 94 13 07 	call	0xe26	; 0xe26 <micros>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	88 19       	sub	r24, r8
     ea4:	99 09       	sbc	r25, r9
     ea6:	aa 09       	sbc	r26, r10
     ea8:	bb 09       	sbc	r27, r11
     eaa:	88 3e       	cpi	r24, 0xE8	; 232
     eac:	93 40       	sbci	r25, 0x03	; 3
     eae:	a1 05       	cpc	r26, r1
     eb0:	b1 05       	cpc	r27, r1
     eb2:	60 f3       	brcs	.-40     	; 0xe8c <delay+0x1c>
     eb4:	21 e0       	ldi	r18, 0x01	; 1
     eb6:	c2 1a       	sub	r12, r18
     eb8:	d1 08       	sbc	r13, r1
     eba:	e1 08       	sbc	r14, r1
     ebc:	f1 08       	sbc	r15, r1
     ebe:	88 ee       	ldi	r24, 0xE8	; 232
     ec0:	88 0e       	add	r8, r24
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	98 1e       	adc	r9, r24
     ec6:	a1 1c       	adc	r10, r1
     ec8:	b1 1c       	adc	r11, r1
     eca:	c1 14       	cp	r12, r1
     ecc:	d1 04       	cpc	r13, r1
     ece:	e1 04       	cpc	r14, r1
     ed0:	f1 04       	cpc	r15, r1
     ed2:	19 f7       	brne	.-58     	; 0xe9a <delay+0x2a>
     ed4:	db cf       	rjmp	.-74     	; 0xe8c <delay+0x1c>
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	bf 90       	pop	r11
     ee0:	af 90       	pop	r10
     ee2:	9f 90       	pop	r9
     ee4:	8f 90       	pop	r8
     ee6:	08 95       	ret

00000ee8 <init>:
     ee8:	78 94       	sei
     eea:	84 b5       	in	r24, 0x24	; 36
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	84 bd       	out	0x24, r24	; 36
     ef0:	84 b5       	in	r24, 0x24	; 36
     ef2:	81 60       	ori	r24, 0x01	; 1
     ef4:	84 bd       	out	0x24, r24	; 36
     ef6:	85 b5       	in	r24, 0x25	; 37
     ef8:	82 60       	ori	r24, 0x02	; 2
     efa:	85 bd       	out	0x25, r24	; 37
     efc:	85 b5       	in	r24, 0x25	; 37
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	85 bd       	out	0x25, r24	; 37
     f02:	ee e6       	ldi	r30, 0x6E	; 110
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	81 60       	ori	r24, 0x01	; 1
     f0a:	80 83       	st	Z, r24
     f0c:	e1 e8       	ldi	r30, 0x81	; 129
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	10 82       	st	Z, r1
     f12:	80 81       	ld	r24, Z
     f14:	82 60       	ori	r24, 0x02	; 2
     f16:	80 83       	st	Z, r24
     f18:	80 81       	ld	r24, Z
     f1a:	81 60       	ori	r24, 0x01	; 1
     f1c:	80 83       	st	Z, r24
     f1e:	e0 e8       	ldi	r30, 0x80	; 128
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	81 60       	ori	r24, 0x01	; 1
     f26:	80 83       	st	Z, r24
     f28:	e1 eb       	ldi	r30, 0xB1	; 177
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	84 60       	ori	r24, 0x04	; 4
     f30:	80 83       	st	Z, r24
     f32:	e0 eb       	ldi	r30, 0xB0	; 176
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	80 83       	st	Z, r24
     f3c:	ea e7       	ldi	r30, 0x7A	; 122
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	84 60       	ori	r24, 0x04	; 4
     f44:	80 83       	st	Z, r24
     f46:	80 81       	ld	r24, Z
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	80 83       	st	Z, r24
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
     f52:	80 81       	ld	r24, Z
     f54:	80 68       	ori	r24, 0x80	; 128
     f56:	80 83       	st	Z, r24
     f58:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f5c:	08 95       	ret

00000f5e <analogWrite>:
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	18 2f       	mov	r17, r24
     f66:	eb 01       	movw	r28, r22
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	0e 94 37 08 	call	0x106e	; 0x106e <pinMode>
     f6e:	20 97       	sbiw	r28, 0x00	; 0
     f70:	11 f4       	brne	.+4      	; 0xf76 <analogWrite+0x18>
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <analogWrite+0x20>
     f76:	cf 3f       	cpi	r28, 0xFF	; 255
     f78:	d1 05       	cpc	r29, r1
     f7a:	39 f4       	brne	.+14     	; 0xf8a <analogWrite+0x2c>
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	81 2f       	mov	r24, r17
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <digitalWrite>
     f8a:	e1 2f       	mov	r30, r17
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	e8 59       	subi	r30, 0x98	; 152
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	e4 91       	lpm	r30, Z
     f94:	e3 30       	cpi	r30, 0x03	; 3
     f96:	f9 f0       	breq	.+62     	; 0xfd6 <analogWrite+0x78>
     f98:	48 f4       	brcc	.+18     	; 0xfac <analogWrite+0x4e>
     f9a:	e1 30       	cpi	r30, 0x01	; 1
     f9c:	b9 f0       	breq	.+46     	; 0xfcc <analogWrite+0x6e>
     f9e:	e2 30       	cpi	r30, 0x02	; 2
     fa0:	a1 f5       	brne	.+104    	; 0x100a <analogWrite+0xac>
     fa2:	84 b5       	in	r24, 0x24	; 36
     fa4:	80 62       	ori	r24, 0x20	; 32
     fa6:	84 bd       	out	0x24, r24	; 36
     fa8:	c8 bd       	out	0x28, r28	; 40
     faa:	34 c0       	rjmp	.+104    	; 0x1014 <analogWrite+0xb6>
     fac:	e7 30       	cpi	r30, 0x07	; 7
     fae:	e9 f0       	breq	.+58     	; 0xfea <analogWrite+0x8c>
     fb0:	e8 30       	cpi	r30, 0x08	; 8
     fb2:	19 f1       	breq	.+70     	; 0xffa <analogWrite+0x9c>
     fb4:	e4 30       	cpi	r30, 0x04	; 4
     fb6:	49 f5       	brne	.+82     	; 0x100a <analogWrite+0xac>
     fb8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fbc:	80 62       	ori	r24, 0x20	; 32
     fbe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fc2:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     fc6:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     fca:	24 c0       	rjmp	.+72     	; 0x1014 <analogWrite+0xb6>
     fcc:	84 b5       	in	r24, 0x24	; 36
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	84 bd       	out	0x24, r24	; 36
     fd2:	c7 bd       	out	0x27, r28	; 39
     fd4:	1f c0       	rjmp	.+62     	; 0x1014 <analogWrite+0xb6>
     fd6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fe0:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     fe4:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     fe8:	15 c0       	rjmp	.+42     	; 0x1014 <analogWrite+0xb6>
     fea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fee:	80 68       	ori	r24, 0x80	; 128
     ff0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ff4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     ff8:	0d c0       	rjmp	.+26     	; 0x1014 <analogWrite+0xb6>
     ffa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ffe:	80 62       	ori	r24, 0x20	; 32
    1000:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1004:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <analogWrite+0xb6>
    100a:	c0 38       	cpi	r28, 0x80	; 128
    100c:	d1 05       	cpc	r29, r1
    100e:	0c f0       	brlt	.+2      	; 0x1012 <analogWrite+0xb4>
    1010:	b5 cf       	rjmp	.-150    	; 0xf7c <analogWrite+0x1e>
    1012:	af cf       	rjmp	.-162    	; 0xf72 <analogWrite+0x14>
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	08 95       	ret

0000101c <turnOffPWM>:
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	81 f0       	breq	.+32     	; 0x1040 <turnOffPWM+0x24>
    1020:	28 f4       	brcc	.+10     	; 0x102c <turnOffPWM+0x10>
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	99 f0       	breq	.+38     	; 0x104c <turnOffPWM+0x30>
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	a1 f0       	breq	.+40     	; 0x1052 <turnOffPWM+0x36>
    102a:	08 95       	ret
    102c:	87 30       	cpi	r24, 0x07	; 7
    102e:	a9 f0       	breq	.+42     	; 0x105a <turnOffPWM+0x3e>
    1030:	88 30       	cpi	r24, 0x08	; 8
    1032:	b9 f0       	breq	.+46     	; 0x1062 <turnOffPWM+0x46>
    1034:	84 30       	cpi	r24, 0x04	; 4
    1036:	d1 f4       	brne	.+52     	; 0x106c <turnOffPWM+0x50>
    1038:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    103c:	8f 7d       	andi	r24, 0xDF	; 223
    103e:	03 c0       	rjmp	.+6      	; 0x1046 <turnOffPWM+0x2a>
    1040:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1044:	8f 77       	andi	r24, 0x7F	; 127
    1046:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    104a:	08 95       	ret
    104c:	84 b5       	in	r24, 0x24	; 36
    104e:	8f 77       	andi	r24, 0x7F	; 127
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <turnOffPWM+0x3a>
    1052:	84 b5       	in	r24, 0x24	; 36
    1054:	8f 7d       	andi	r24, 0xDF	; 223
    1056:	84 bd       	out	0x24, r24	; 36
    1058:	08 95       	ret
    105a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    105e:	8f 77       	andi	r24, 0x7F	; 127
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <turnOffPWM+0x4c>
    1062:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1066:	8f 7d       	andi	r24, 0xDF	; 223
    1068:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    106c:	08 95       	ret

0000106e <pinMode>:
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	fc 01       	movw	r30, r24
    1076:	e4 58       	subi	r30, 0x84	; 132
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	24 91       	lpm	r18, Z
    107c:	fc 01       	movw	r30, r24
    107e:	e0 57       	subi	r30, 0x70	; 112
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	84 91       	lpm	r24, Z
    1084:	88 23       	and	r24, r24
    1086:	61 f1       	breq	.+88     	; 0x10e0 <pinMode+0x72>
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	fc 01       	movw	r30, r24
    1090:	e8 54       	subi	r30, 0x48	; 72
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	c5 91       	lpm	r28, Z+
    1096:	d4 91       	lpm	r29, Z
    1098:	fc 01       	movw	r30, r24
    109a:	e2 55       	subi	r30, 0x52	; 82
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	a5 91       	lpm	r26, Z+
    10a0:	b4 91       	lpm	r27, Z
    10a2:	61 11       	cpse	r22, r1
    10a4:	09 c0       	rjmp	.+18     	; 0x10b8 <pinMode+0x4a>
    10a6:	9f b7       	in	r25, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	88 81       	ld	r24, Y
    10ac:	20 95       	com	r18
    10ae:	82 23       	and	r24, r18
    10b0:	88 83       	st	Y, r24
    10b2:	ec 91       	ld	r30, X
    10b4:	2e 23       	and	r18, r30
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <pinMode+0x60>
    10b8:	62 30       	cpi	r22, 0x02	; 2
    10ba:	61 f4       	brne	.+24     	; 0x10d4 <pinMode+0x66>
    10bc:	9f b7       	in	r25, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	88 81       	ld	r24, Y
    10c2:	32 2f       	mov	r19, r18
    10c4:	30 95       	com	r19
    10c6:	83 23       	and	r24, r19
    10c8:	88 83       	st	Y, r24
    10ca:	ec 91       	ld	r30, X
    10cc:	2e 2b       	or	r18, r30
    10ce:	2c 93       	st	X, r18
    10d0:	9f bf       	out	0x3f, r25	; 63
    10d2:	06 c0       	rjmp	.+12     	; 0x10e0 <pinMode+0x72>
    10d4:	8f b7       	in	r24, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	e8 81       	ld	r30, Y
    10da:	2e 2b       	or	r18, r30
    10dc:	28 83       	st	Y, r18
    10de:	8f bf       	out	0x3f, r24	; 63
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <digitalWrite>:
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	f9 01       	movw	r30, r18
    10f2:	e8 59       	subi	r30, 0x98	; 152
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	84 91       	lpm	r24, Z
    10f8:	f9 01       	movw	r30, r18
    10fa:	e4 58       	subi	r30, 0x84	; 132
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	d4 91       	lpm	r29, Z
    1100:	f9 01       	movw	r30, r18
    1102:	e0 57       	subi	r30, 0x70	; 112
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	c4 91       	lpm	r28, Z
    1108:	cc 23       	and	r28, r28
    110a:	c1 f0       	breq	.+48     	; 0x113c <digitalWrite+0x56>
    110c:	16 2f       	mov	r17, r22
    110e:	81 11       	cpse	r24, r1
    1110:	0e 94 0e 08 	call	0x101c	; 0x101c <turnOffPWM>
    1114:	ec 2f       	mov	r30, r28
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	e2 55       	subi	r30, 0x52	; 82
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	a5 91       	lpm	r26, Z+
    1122:	b4 91       	lpm	r27, Z
    1124:	9f b7       	in	r25, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	11 11       	cpse	r17, r1
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <digitalWrite+0x4e>
    112c:	8c 91       	ld	r24, X
    112e:	d0 95       	com	r29
    1130:	d8 23       	and	r29, r24
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <digitalWrite+0x52>
    1134:	ec 91       	ld	r30, X
    1136:	de 2b       	or	r29, r30
    1138:	dc 93       	st	X, r29
    113a:	9f bf       	out	0x3f, r25	; 63
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	08 95       	ret

00001144 <digitalRead>:
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	f9 01       	movw	r30, r18
    114e:	e8 59       	subi	r30, 0x98	; 152
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	84 91       	lpm	r24, Z
    1154:	f9 01       	movw	r30, r18
    1156:	e4 58       	subi	r30, 0x84	; 132
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	d4 91       	lpm	r29, Z
    115c:	f9 01       	movw	r30, r18
    115e:	e0 57       	subi	r30, 0x70	; 112
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	c4 91       	lpm	r28, Z
    1164:	cc 23       	and	r28, r28
    1166:	91 f0       	breq	.+36     	; 0x118c <digitalRead+0x48>
    1168:	81 11       	cpse	r24, r1
    116a:	0e 94 0e 08 	call	0x101c	; 0x101c <turnOffPWM>
    116e:	ec 2f       	mov	r30, r28
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	ee 0f       	add	r30, r30
    1174:	ff 1f       	adc	r31, r31
    1176:	ec 55       	subi	r30, 0x5C	; 92
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	a5 91       	lpm	r26, Z+
    117c:	b4 91       	lpm	r27, Z
    117e:	ec 91       	ld	r30, X
    1180:	ed 23       	and	r30, r29
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	21 f4       	brne	.+8      	; 0x1190 <digitalRead+0x4c>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <digitalRead+0x4c>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	08 95       	ret

00001196 <yield>:
    1196:	08 95       	ret

00001198 <__divmodhi4>:
    1198:	97 fb       	bst	r25, 7
    119a:	07 2e       	mov	r0, r23
    119c:	16 f4       	brtc	.+4      	; 0x11a2 <__divmodhi4+0xa>
    119e:	00 94       	com	r0
    11a0:	07 d0       	rcall	.+14     	; 0x11b0 <__divmodhi4_neg1>
    11a2:	77 fd       	sbrc	r23, 7
    11a4:	09 d0       	rcall	.+18     	; 0x11b8 <__divmodhi4_neg2>
    11a6:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__udivmodhi4>
    11aa:	07 fc       	sbrc	r0, 7
    11ac:	05 d0       	rcall	.+10     	; 0x11b8 <__divmodhi4_neg2>
    11ae:	3e f4       	brtc	.+14     	; 0x11be <__divmodhi4_exit>

000011b0 <__divmodhi4_neg1>:
    11b0:	90 95       	com	r25
    11b2:	81 95       	neg	r24
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	08 95       	ret

000011b8 <__divmodhi4_neg2>:
    11b8:	70 95       	com	r23
    11ba:	61 95       	neg	r22
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255

000011be <__divmodhi4_exit>:
    11be:	08 95       	ret

000011c0 <__udivmodhi4>:
    11c0:	aa 1b       	sub	r26, r26
    11c2:	bb 1b       	sub	r27, r27
    11c4:	51 e1       	ldi	r21, 0x11	; 17
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <__udivmodhi4_ep>

000011c8 <__udivmodhi4_loop>:
    11c8:	aa 1f       	adc	r26, r26
    11ca:	bb 1f       	adc	r27, r27
    11cc:	a6 17       	cp	r26, r22
    11ce:	b7 07       	cpc	r27, r23
    11d0:	10 f0       	brcs	.+4      	; 0x11d6 <__udivmodhi4_ep>
    11d2:	a6 1b       	sub	r26, r22
    11d4:	b7 0b       	sbc	r27, r23

000011d6 <__udivmodhi4_ep>:
    11d6:	88 1f       	adc	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	5a 95       	dec	r21
    11dc:	a9 f7       	brne	.-22     	; 0x11c8 <__udivmodhi4_loop>
    11de:	80 95       	com	r24
    11e0:	90 95       	com	r25
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	08 95       	ret

000011e8 <__tablejump2__>:
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	05 90       	lpm	r0, Z+
    11ee:	f4 91       	lpm	r31, Z
    11f0:	e0 2d       	mov	r30, r0
    11f2:	09 94       	ijmp

000011f4 <_exit>:
    11f4:	f8 94       	cli

000011f6 <__stop_program>:
    11f6:	ff cf       	rjmp	.-2      	; 0x11f6 <__stop_program>
